
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; HPDL domain for a VGDL game
;;; Made with antlr-vgdl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain VGDLGame)  
	(:requirements
		:typing
		:fluents
		:derived-predicates
		:negative-preconditions
		:universal-preconditions
		:disjuntive-preconditions
		:conditional-effects
		:htn-expansion

		; For time management
		; :durative-actions
		; :metatags

		:equality
	)

	; Types ---------------------------------------------------------------------

	(:types
		floor - Immovable
		avatar - OrientedAvatar
		gem - Immovable
		green - gem
		red - gem
		blue - gem
		key - Passive
		keym - Missile
		exit - Immovable
		door - Immovable
		boulder - Passive
		wall - Immovable
		Passive Missile Immovable OrientedAvatar - Object
	)

	; Constants -----------------------------------------------------------------

	(:constants
	)

	; Predicates ----------------------------------------------------------------

	(:predicates
		(orientation-up ?o - Object)
		(orientation-down ?o - Object)
		(orientation-left ?o - Object)
		(orientation-right ?o - Object)
		(can-move-up ?a - OrientedAvatar)
		(can-move-down ?a - OrientedAvatar)
		(can-move-left ?a - OrientedAvatar)
		(can-move-right ?a - OrientedAvatar)
		(can-change-orientation ?a - OrientedAvatar)
		(evaluate-interaction ?o1 ?o2 - Object)
		(regenerate-interaction ?o1 ?o2 - Object)
	)
  
	; Functions -----------------------------------------------------------------

	(:functions
		(coordinate_x ?o - Object)
		(coordinate_y ?o - Object)
		(last_coordinate_x ?o - Object)
		(last_coordinate_y ?o - Object)
		(counter_floor)
		(counter_Immovable)
		(counter_avatar)
		(counter_OrientedAvatar)
		(counter_gem)
		(counter_green)
		(counter_red)
		(counter_blue)
		(counter_key)
		(counter_Passive)
		(counter_keym)
		(counter_Missile)
		(counter_exit)
		(counter_door)
		(counter_boulder)
		(counter_wall)
		(counter_Object)
		(turn)
	)

	; Tasks ---------------------------------------------------------------------
  
	(:task Turn
		:parameters ( )

		(:method finish_game
				:precondition (and 
									(= (turn) 10)
								)
				:tasks (  
						)
		)

		(:method turn
				:precondition (
								)
				:tasks ( 
							(turn_avatar ?a - OrientedAvatar)
							(turn_objects)
							(check-interactions)
							(create-interactions)
							(:inline () (increase (turn) 1))
							(Turn) 
						)
		)
	)

	(:task turn_avatar
		:parameters ( ?a - OrientedAvatar )

		(:method avatar_move_up
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_UP ?a) 
						)
		)

		(:method avatar_move_down
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_DOWN ?a) 
						)
		)

		(:method avatar_move_left
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_LEFT ?a) 
						)
		)

		(:method avatar_move_right
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_RIGHT ?a) 
						)
		)

		(:method avatar_turn_up
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_UP ?a) 
						)
		)

		(:method avatar_turn_down
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_DOWN ?a) 
						)
		)

		(:method avatar_turn_left
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_LEFT ?a) 
						)
		)

		(:method avatar_turn_right
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_RIGHT ?a) 
						)
		)

		(:method avatar_nil
				:precondition (
								)
				:tasks ( 
							(AVATAR_NIL ?a) 
						)
		)
	)

	(:task turn_objects
		:parameters ( )

		(:method turn
				:precondition (
								)
				:tasks ( 
							(KEYM_MOVE) 
						)
		)
	)

	(:task create-interactions
		:parameters ( )

		(:method create
				:precondition (and 
									(not (evaluate-interaction ?o1 - Object ?o2 - Object))
								)
				:tasks ( 
							(:inline () (evaluate-interaction ?o1 ?o2)) 
						)
		)

		(:method base_case
				:precondition (
								)
				:tasks (  
						)
		)
	)

	(:task check-interactions
		:parameters ( )

		(:method keym_key_transformto
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Passive)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEYM_KEY_TRANSFORMTO ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Passive)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Passive))
							(check-interactions) 
						)
		)

		(:method keym_wall_transformto
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEYM_WALL_TRANSFORMTO ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method keym_gem_transformto
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEYM_GEM_TRANSFORMTO ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method keym_boulder_transformto
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Passive)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEYM_BOULDER_TRANSFORMTO ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Passive)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Passive))
							(check-interactions) 
						)
		)

		(:method avatar_wall_stepback
				:precondition (and 
									(evaluate-interaction ?x - OrientedAvatar ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_WALL_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - OrientedAvatar ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - OrientedAvatar ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method avatar_door_stepback
				:precondition (and 
									(evaluate-interaction ?x - OrientedAvatar ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_DOOR_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - OrientedAvatar ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - OrientedAvatar ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method boulder_avatar_bounceforward
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_AVATAR_BOUNCEFORWARD ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - Passive ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method key_avatar_transformto
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEY_AVATAR_TRANSFORMTO ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - Passive ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method keym_avatar_attractgaze
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEYM_AVATAR_ATTRACTGAZE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - Missile ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method avatar_key_stepback
				:precondition (and 
									(evaluate-interaction ?x - OrientedAvatar ?y - Passive)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_KEY_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - OrientedAvatar ?y - Passive)))
							(:inline () (regenerate-interaction ?x - OrientedAvatar ?y - Passive))
							(check-interactions) 
						)
		)

		(:method avatar_keym_stepback
				:precondition (and 
									(evaluate-interaction ?x - OrientedAvatar ?y - Missile)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_KEYM_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - OrientedAvatar ?y - Missile)))
							(:inline () (regenerate-interaction ?x - OrientedAvatar ?y - Missile))
							(check-interactions) 
						)
		)

		(:method door_keym_killboth
				:precondition (and 
									(evaluate-interaction ?x - Immovable ?y - Missile)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(DOOR_KEYM_KILLBOTH ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Immovable ?y - Missile)))
							(:inline () (regenerate-interaction ?x - Immovable ?y - Missile))
							(check-interactions) 
						)
		)

		(:method green_avatar_killsprite
				:precondition (and 
									(evaluate-interaction ?x - gem ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(GREEN_AVATAR_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - gem ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - gem ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method blue_avatar_killsprite
				:precondition (and 
									(evaluate-interaction ?x - gem ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BLUE_AVATAR_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - gem ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - gem ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method red_avatar_killsprite
				:precondition (and 
									(evaluate-interaction ?x - gem ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(RED_AVATAR_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - gem ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - gem ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method boulder_wall_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_WALL_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method boulder_key_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Passive)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_KEY_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Passive)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Passive))
							(check-interactions) 
						)
		)

		(:method boulder_gem_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_GEM_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method boulder_boulder_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Passive)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_BOULDER_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Passive)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Passive))
							(check-interactions) 
						)
		)

		(:method key_wall_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEY_WALL_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method key_gem_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEY_GEM_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method key_key_undoall
				:precondition (and 
									(evaluate-interaction ?x - Passive ?y - Passive)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(KEY_KEY_UNDOALL ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Passive ?y - Passive)))
							(:inline () (regenerate-interaction ?x - Passive ?y - Passive))
							(check-interactions) 
						)
		)

		(:method exit_avatar_killsprite
				:precondition (and 
									(evaluate-interaction ?x - Immovable ?y - OrientedAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(EXIT_AVATAR_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Immovable ?y - OrientedAvatar)))
							(:inline () (regenerate-interaction ?x - Immovable ?y - OrientedAvatar))
							(check-interactions) 
						)
		)

		(:method base_case
				:precondition (
								)
				:tasks (  
						)
		)
	)

	
	; Actions -------------------------------------------------------------------
  
	(:action AVATAR_MOVE_UP
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(can-move-up ?a)
						(orientation-up ?a)
					)
		:effect (and 
					(decrease (coordinate_x ?a) 1)
				)
	)

	(:action AVATAR_MOVE_DOWN
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(can-move-down ?a)
						(orientation-down ?a)
					)
		:effect (and 
					(increase (coordinate_x ?a) 1)
				)
	)

	(:action AVATAR_MOVE_LEFT
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(can-move-left ?a)
						(orientation-left ?a)
					)
		:effect (and 
					(decrease (coordinate_y ?a) 1)
				)
	)

	(:action AVATAR_MOVE_RIGHT
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(can-move-right ?a)
						(orientation-right ?a)
					)
		:effect (and 
					(increase (coordinate_y ?a) 1)
				)
	)

	(:action AVATAR_TURN_UP
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(not (orientation-up ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-down ?a )
                        (not (orientation-down ?a))
                    )
					
                    (when
                        (orientation-right ?a )
                        (not (orientation-right ?a))
                    )
					
                    (when
                        (orientation-left ?a )
                        (not (orientation-left ?a))
                    )
					(orientation-up ?a)
				)
	)

	(:action AVATAR_TURN_DOWN
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(not (orientation-down ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-left ?a )
                        (not (orientation-left ?a))
                    )
					
                    (when
                        (orientation-right ?a )
                        (not (orientation-right ?a))
                    )
					
                    (when
                        (orientation-up ?a )
                        (not (orientation-up ?a))
                    )
					(orientation-down ?a)
				)
	)

	(:action AVATAR_TURN_LEFT
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(not (orientation-left ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-down ?a )
                        (not (orientation-down ?a))
                    )
					
                    (when
                        (orientation-right ?a )
                        (not (orientation-right ?a))
                    )
					
                    (when
                        (orientation-up ?a )
                        (not (orientation-up ?a))
                    )
					(orientation-left ?a)
				)
	)

	(:action AVATAR_TURN_RIGHT
		:parameters (?a - OrientedAvatar )
		:precondition (and 
						(not (orientation-right ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-down ?a )
                        (not (orientation-down ?a))
                    )
					
                    (when
                        (orientation-left ?a )
                        (not (orientation-left ?a))
                    )
					
                    (when
                        (orientation-up ?a )
                        (not (orientation-up ?a))
                    )
					(orientation-right ?a)
				)
	)

	(:action AVATAR_NIL
		:parameters (?a - OrientedAvatar )
		:precondition (
					)
		:effect (
				)
	)

	(:action KEYM_MOVE
		:parameters ()
		:precondition (
					)
		:effect (
					
                    forall (?m - Missile)
					(and
						(when
							(orientation-up ?m)

							(and
								(assign (last_coordinate_y ?m) (coordinate_y ?m))
								(decrease (coordinate_y ?m) 1)						
							)
						)

						(when
							(orientation-down ?m)

							(and
								(assign (last_coordinate_y ?m) (coordinate_y ?m))
								(increase (coordinate_y ?m) 1)						
							)
						)

						(when
							(orientation-left ?m)

							(and
								(assign (last_coordinate_x ?m) (coordinate_x ?m))
								(decrease (coordinate_x ?m) 1)						
							)
						)

						(when
							(orientation-right ?m)

							(and
								(assign (last_coordinate_x ?m) (coordinate_x ?m))
								(increase (coordinate_x ?m) 1)			
							)
						)
					)

				)
	)

	(:action KEYM_KEY_TRANSFORMTO
		:parameters (?x - keym ?y - Passive )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_Missile) 1)
					(decrease (counter_Passive) 1)
					(assign (coordinate_x ?z) (last_coordinate_x ?x))
					(assign (coordinate_y ?z) (last_coordinate_y ?x))
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action KEYM_WALL_TRANSFORMTO
		:parameters (?x - keym ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_Missile) 1)
					(decrease (counter_Immovable) 1)
					(assign (coordinate_x ?z) (last_coordinate_x ?x))
					(assign (coordinate_y ?z) (last_coordinate_y ?x))
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action KEYM_GEM_TRANSFORMTO
		:parameters (?x - keym ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_Missile) 1)
					(decrease (counter_Immovable) 1)
					(assign (coordinate_x ?z) (last_coordinate_x ?x))
					(assign (coordinate_y ?z) (last_coordinate_y ?x))
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action KEYM_BOULDER_TRANSFORMTO
		:parameters (?x - keym ?y - Passive )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_Missile) 1)
					(decrease (counter_Passive) 1)
					(assign (coordinate_x ?z) (last_coordinate_x ?x))
					(assign (coordinate_y ?z) (last_coordinate_y ?x))
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action AVATAR_WALL_STEPBACK
		:parameters (?x - avatar ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action AVATAR_DOOR_STEPBACK
		:parameters (?x - avatar ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action BOULDER_AVATAR_BOUNCEFORWARD
		:parameters (?x - boulder ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					
                        (when
                            (orientation-up ?y)

                            (and
                                (assign (last_coordinate_y ?x) (coordinate_y ?x))
                                (decrease (coordinate_y ?x) 1)
                            )
                        )
                        (when
                            (orientation-down ?y)

                            (and
                                (assign (last_coordinate_y ?x) (coordinate_y ?x))
                                (increase (coordinate_y ?x) 1)
                            )
                        )
                        (when
                            (orientation-left ?y)

                            (and
                                (assign (last_coordinate_x ?x) (coordinate_x ?x))
                                (decrease (coordinate_x ?x) 1)
                            )
                        )
                        (when
                            (orientation-right ?y)

                            (and
                                (assign (last_coordinate_x ?x) (coordinate_x ?x))
                                (increase (coordinate_x ?x) 1)
                            )
                        )
				)
	)

	(:action KEY_AVATAR_TRANSFORMTO
		:parameters (?x - key ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_Passive) 1)
					(decrease (counter_OrientedAvatar) 1)
					(assign (coordinate_x ?z) (last_coordinate_x ?x))
					(assign (coordinate_y ?z) (last_coordinate_y ?x))
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action KEYM_AVATAR_ATTRACTGAZE
		:parameters (?x - keym ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (
				)
	)

	(:action AVATAR_KEY_STEPBACK
		:parameters (?x - avatar ?y - Passive )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action AVATAR_KEYM_STEPBACK
		:parameters (?x - avatar ?y - Missile )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action DOOR_KEYM_KILLBOTH
		:parameters (?x - door ?y - Missile )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Missile) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action GREEN_AVATAR_KILLSPRITE
		:parameters (?x - green ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_gem) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action BLUE_AVATAR_KILLSPRITE
		:parameters (?x - blue ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_gem) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action RED_AVATAR_KILLSPRITE
		:parameters (?x - red ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_gem) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action BOULDER_WALL_UNDOALL
		:parameters (?x - boulder ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action BOULDER_KEY_UNDOALL
		:parameters (?x - boulder ?y - Passive )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action BOULDER_GEM_UNDOALL
		:parameters (?x - boulder ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action BOULDER_BOULDER_UNDOALL
		:parameters (?x - boulder ?y - Passive )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action KEY_WALL_UNDOALL
		:parameters (?x - key ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action KEY_GEM_UNDOALL
		:parameters (?x - key ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action KEY_KEY_UNDOALL
		:parameters (?x - key ?y - Passive )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(not (= (coordinate_y ?x) (coordinate_y ?y)))
					)
		:effect (
				)
	)

	(:action EXIT_AVATAR_KILLSPRITE
		:parameters (?x - exit ?y - OrientedAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)


)
