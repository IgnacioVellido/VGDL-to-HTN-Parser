
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; HPDL domain for a VGDL game
;;; Made with antlr-vgdl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain VGDLGame)  
	(:requirements
		:typing
		:fluents
		:derived-predicates
		:negative-preconditions
		:universal-preconditions
		:disjuntive-preconditions
		:conditional-effects
		:htn-expansion

		; For time management
		; :durative-actions
		; :metatags

		:equality
	)

	; Types ---------------------------------------------------------------------

	(:types
		background - Immovable
		wall - Immovable
		sword - Flicker
		dirt - Immovable
		exitdoor - Door
		diamond - Resource
		boulder - Missile
		moving - movingStype
		avatar - ShootAvatar
		enemy - RandomNPC
		crab - enemy
		butterfly - enemy
		Door Resource movingStype ShootAvatar Missile Immovable RandomNPC Flicker - Object
	)

	; Constants -----------------------------------------------------------------

	(:constants
	)

	; Predicates ----------------------------------------------------------------

	(:predicates
		(orientation-up ?o - Object)
		(orientation-down ?o - Object)
		(orientation-left ?o - Object)
		(orientation-right ?o - Object)
		(can-move-up ?a - ShootAvatar)
		(can-move-down ?a - ShootAvatar)
		(can-move-left ?a - ShootAvatar)
		(can-move-right ?a - ShootAvatar)
		(can-change-orientation ?a - ShootAvatar)
		(can-use ?a - ShootAvatar)
		(evaluate-interaction ?o1 ?o2 - Object)
		(regenerate-interaction ?o1 ?o2 - Object)
	)
  
	; Functions -----------------------------------------------------------------

	(:functions
		(coordinate_x ?o - Object)
		(coordinate_y ?o - Object)
		(last_coordinate_x ?o - Object)
		(last_coordinate_y ?o - Object)
		(resource_diamond ?a - avatar)
		(counter_background)
		(counter_Immovable)
		(counter_wall)
		(counter_sword)
		(counter_Flicker)
		(counter_dirt)
		(counter_exitdoor)
		(counter_Door)
		(counter_diamond)
		(counter_Resource)
		(counter_boulder)
		(counter_Missile)
		(counter_movingStype)
		(counter_moving)
		(counter_avatar)
		(counter_ShootAvatar)
		(counter_enemy)
		(counter_RandomNPC)
		(counter_crab)
		(counter_butterfly)
		(counter_Object)
		(turn)
	)

	; Tasks ---------------------------------------------------------------------
  
	(:task Turn
		:parameters ( )

		(:method finish_game
				:precondition (and 
									(= (turn) 1)
								)
				:tasks (  
						)
		)

		(:method turn
				:precondition (
								)
				:tasks ( 
							(turn_avatar ?a - ShootAvatar ?p - sword)
							(turn_objects)
							(check-interactions)
							(create-interactions)
							(:inline () (increase (turn) 1))
							(Turn) 
						)
		)
	)

	(:task turn_avatar
		:parameters ( ?a - ShootAvatar ?p - sword )

		(:method avatar_move_up
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_UP ?a) 
						)
		)

		(:method avatar_move_down
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_DOWN ?a) 
						)
		)

		(:method avatar_move_left
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_LEFT ?a) 
						)
		)

		(:method avatar_move_right
				:precondition (
								)
				:tasks ( 
							(AVATAR_MOVE_RIGHT ?a) 
						)
		)

		(:method avatar_turn_up
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_UP ?a) 
						)
		)

		(:method avatar_turn_down
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_DOWN ?a) 
						)
		)

		(:method avatar_turn_left
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_LEFT ?a) 
						)
		)

		(:method avatar_turn_right
				:precondition (
								)
				:tasks ( 
							(AVATAR_TURN_RIGHT ?a) 
						)
		)

		(:method avatar_use
				:precondition (
								)
				:tasks ( 
							(AVATAR_USE ?a ?p) 
						)
		)

		(:method avatar_nil
				:precondition (
								)
				:tasks ( 
							(AVATAR_NIL ?a) 
						)
		)
	)

	(:task turn_objects
		:parameters ( )

		(:method turn
				:precondition (
								)
				:tasks ( 
							(BOULDER_MOVE) 
						)
		)
	)

	(:task create-interactions
		:parameters ( )

		(:method create
				:precondition (and 
									(not (evaluate-interaction ?o1 - Object ?o2 - Object))
								)
				:tasks ( 
							(:inline () (evaluate-interaction ?o1 ?o2)) 
						)
		)

		(:method base_case
				:precondition (
								)
				:tasks (  
						)
		)
	)

	(:task check-interactions
		:parameters ( )

		(:method dirt_avatar_killsprite
				:precondition (and 
									(evaluate-interaction ?x - Immovable ?y - ShootAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(DIRT_AVATAR_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Immovable ?y - ShootAvatar)))
							(:inline () (regenerate-interaction ?x - Immovable ?y - ShootAvatar))
							(check-interactions) 
						)
		)

		(:method dirt_sword_killsprite
				:precondition (and 
									(evaluate-interaction ?x - Immovable ?y - Flicker)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(DIRT_SWORD_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Immovable ?y - Flicker)))
							(:inline () (regenerate-interaction ?x - Immovable ?y - Flicker))
							(check-interactions) 
						)
		)

		(:method diamond_avatar_collectresource
				:precondition (and 
									(evaluate-interaction ?x - Resource ?y - ShootAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(DIAMOND_AVATAR_COLLECTRESOURCE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Resource ?y - ShootAvatar)))
							(:inline () (regenerate-interaction ?x - Resource ?y - ShootAvatar))
							(check-interactions) 
						)
		)

		(:method moving_wall_stepback
				:precondition (and 
									(evaluate-interaction ?x - movingStype ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(MOVING_WALL_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - movingStype ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - movingStype ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method moving_boulder_stepback
				:precondition (and 
									(evaluate-interaction ?x - movingStype ?y - Missile)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(MOVING_BOULDER_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - movingStype ?y - Missile)))
							(:inline () (regenerate-interaction ?x - movingStype ?y - Missile))
							(check-interactions) 
						)
		)

		(:method avatar_boulder_killiffromabove
				:precondition (and 
									(evaluate-interaction ?x - ShootAvatar ?y - Missile)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_BOULDER_KILLIFFROMABOVE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - ShootAvatar ?y - Missile)))
							(:inline () (regenerate-interaction ?x - ShootAvatar ?y - Missile))
							(check-interactions) 
						)
		)

		(:method avatar_butterfly_killsprite
				:precondition (and 
									(evaluate-interaction ?x - ShootAvatar ?y - enemy)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_BUTTERFLY_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - ShootAvatar ?y - enemy)))
							(:inline () (regenerate-interaction ?x - ShootAvatar ?y - enemy))
							(check-interactions) 
						)
		)

		(:method avatar_crab_killsprite
				:precondition (and 
									(evaluate-interaction ?x - ShootAvatar ?y - enemy)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(AVATAR_CRAB_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - ShootAvatar ?y - enemy)))
							(:inline () (regenerate-interaction ?x - ShootAvatar ?y - enemy))
							(check-interactions) 
						)
		)

		(:method boulder_dirt_stepback
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_DIRT_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method boulder_wall_stepback
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_WALL_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method boulder_diamond_stepback
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Resource)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_DIAMOND_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Resource)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Resource))
							(check-interactions) 
						)
		)

		(:method boulder_boulder_stepback
				:precondition (and 
									(evaluate-interaction ?x - Missile ?y - Missile)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BOULDER_BOULDER_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Missile ?y - Missile)))
							(:inline () (regenerate-interaction ?x - Missile ?y - Missile))
							(check-interactions) 
						)
		)

		(:method enemy_dirt_stepback
				:precondition (and 
									(evaluate-interaction ?x - RandomNPC ?y - Immovable)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(ENEMY_DIRT_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - RandomNPC ?y - Immovable)))
							(:inline () (regenerate-interaction ?x - RandomNPC ?y - Immovable))
							(check-interactions) 
						)
		)

		(:method enemy_diamond_stepback
				:precondition (and 
									(evaluate-interaction ?x - RandomNPC ?y - Resource)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(ENEMY_DIAMOND_STEPBACK ?x ?y)
							(:inline () (not (evaluate-interaction ?x - RandomNPC ?y - Resource)))
							(:inline () (regenerate-interaction ?x - RandomNPC ?y - Resource))
							(check-interactions) 
						)
		)

		(:method crab_butterfly_killsprite
				:precondition (and 
									(evaluate-interaction ?x - enemy ?y - enemy)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(CRAB_BUTTERFLY_KILLSPRITE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - enemy ?y - enemy)))
							(:inline () (regenerate-interaction ?x - enemy ?y - enemy))
							(check-interactions) 
						)
		)

		(:method butterfly_crab_transformto
				:precondition (and 
									(evaluate-interaction ?x - enemy ?y - enemy)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(BUTTERFLY_CRAB_TRANSFORMTO ?x ?y)
							(:inline () (not (evaluate-interaction ?x - enemy ?y - enemy)))
							(:inline () (regenerate-interaction ?x - enemy ?y - enemy))
							(check-interactions) 
						)
		)

		(:method exitdoor_avatar_killifotherhasmore
				:precondition (and 
									(evaluate-interaction ?x - Door ?y - ShootAvatar)
									(not (= (coordinate_x ?x) -1))
									(not (= (coordinate_x ?y) -1))
								)
				:tasks ( 
							(EXITDOOR_AVATAR_KILLIFOTHERHASMORE ?x ?y)
							(:inline () (not (evaluate-interaction ?x - Door ?y - ShootAvatar)))
							(:inline () (regenerate-interaction ?x - Door ?y - ShootAvatar))
							(check-interactions) 
						)
		)

		(:method base_case
				:precondition (
								)
				:tasks (  
						)
		)
	)

	
	; Actions -------------------------------------------------------------------
  
	(:action AVATAR_MOVE_UP
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(can-move-up ?a)
						(orientation-up ?a)
					)
		:effect (and 
					(decrease (coordinate_x ?a) 1)
				)
	)

	(:action AVATAR_MOVE_DOWN
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(can-move-down ?a)
						(orientation-down ?a)
					)
		:effect (and 
					(increase (coordinate_x ?a) 1)
				)
	)

	(:action AVATAR_MOVE_LEFT
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(can-move-left ?a)
						(orientation-left ?a)
					)
		:effect (and 
					(decrease (coordinate_y ?a) 1)
				)
	)

	(:action AVATAR_MOVE_RIGHT
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(can-move-right ?a)
						(orientation-right ?a)
					)
		:effect (and 
					(increase (coordinate_y ?a) 1)
				)
	)

	(:action AVATAR_TURN_UP
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(not (orientation-up ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-down ?a )
                        (not (orientation-down ?a))
                    )
					
                    (when
                        (orientation-right ?a )
                        (not (orientation-right ?a))
                    )
					
                    (when
                        (orientation-left ?a )
                        (not (orientation-left ?a))
                    )
					(orientation-up ?a)
				)
	)

	(:action AVATAR_TURN_DOWN
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(not (orientation-down ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-left ?a )
                        (not (orientation-left ?a))
                    )
					
                    (when
                        (orientation-right ?a )
                        (not (orientation-right ?a))
                    )
					
                    (when
                        (orientation-up ?a )
                        (not (orientation-up ?a))
                    )
					(orientation-down ?a)
				)
	)

	(:action AVATAR_TURN_LEFT
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(not (orientation-left ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-down ?a )
                        (not (orientation-down ?a))
                    )
					
                    (when
                        (orientation-right ?a )
                        (not (orientation-right ?a))
                    )
					
                    (when
                        (orientation-up ?a )
                        (not (orientation-up ?a))
                    )
					(orientation-left ?a)
				)
	)

	(:action AVATAR_TURN_RIGHT
		:parameters (?a - ShootAvatar )
		:precondition (and 
						(not (orientation-right ?a))
					)
		:effect (and 
					
                    (when
                        (orientation-down ?a )
                        (not (orientation-down ?a))
                    )
					
                    (when
                        (orientation-left ?a )
                        (not (orientation-left ?a))
                    )
					
                    (when
                        (orientation-up ?a )
                        (not (orientation-up ?a))
                    )
					(orientation-right ?a)
				)
	)

	(:action AVATAR_USE
		:parameters (?a - ShootAvatar ?p - sword )
		:precondition (and 
						(can-use ?a)
					)
		:effect (and 
					(increase (counter_sword) 1)
					
                    (when
                        (orientation-up ?a)

                        (and
                            (assign (coordinate_x ?p) (coordinate_x ?a))
                            (assign (coordinate_y ?p) (coordinate_y ?a))
                            (decrease (coordinate_y ?p) 1)						
                        )
                    )

                    (when
                        (orientation-down ?a)

                        (and
                            (assign (coordinate_x ?p) (coordinate_x ?a))
                            (assign (coordinate_y ?p) (coordinate_y ?a))
                            (increase (coordinate_y ?p) 1)						
                        )
                    )

                    (when
                        (orientation-left ?a)

                        (and
                            (assign (coordinate_x ?p) (coordinate_x ?a))
                            (assign (coordinate_y ?p) (coordinate_y ?a))
                            (decrease (coordinate_x ?p) 1)						
                        )
                    )

                    (when
                        (orientation-right ?a)

                        (and
                            (assign (coordinate_x ?p) (coordinate_x ?a))
                            (assign (coordinate_y ?p) (coordinate_y ?a))
                            (increase (coordinate_x ?p) 1)						
                        )
                    )
				)
	)

	(:action AVATAR_NIL
		:parameters (?a - ShootAvatar )
		:precondition (
					)
		:effect (
				)
	)

	(:action BOULDER_MOVE
		:parameters ()
		:precondition (
					)
		:effect (
					
                    forall (?m - Missile)
					(and
						(when
							(orientation-up ?m)

							(and
								(assign (last_coordinate_y ?m) (coordinate_y ?m))
								(decrease (coordinate_y ?m) 1)						
							)
						)

						(when
							(orientation-down ?m)

							(and
								(assign (last_coordinate_y ?m) (coordinate_y ?m))
								(increase (coordinate_y ?m) 1)						
							)
						)

						(when
							(orientation-left ?m)

							(and
								(assign (last_coordinate_x ?m) (coordinate_x ?m))
								(decrease (coordinate_x ?m) 1)						
							)
						)

						(when
							(orientation-right ?m)

							(and
								(assign (last_coordinate_x ?m) (coordinate_x ?m))
								(increase (coordinate_x ?m) 1)			
							)
						)
					)

				)
	)

	(:action DIRT_AVATAR_KILLSPRITE
		:parameters (?x - dirt ?y - ShootAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action DIRT_SWORD_KILLSPRITE
		:parameters (?x - dirt ?y - Flicker )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_Immovable) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action DIAMOND_AVATAR_COLLECTRESOURCE
		:parameters (?x - diamond ?y - ShootAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_Resource) 1)
					(decrease (counter_Resource) 1)
					(decrease (counter_Object) 1)
					(increase (resource_diamond ?y) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action MOVING_WALL_STEPBACK
		:parameters (?x - moving ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action MOVING_BOULDER_STEPBACK
		:parameters (?x - moving ?y - Missile )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action AVATAR_BOULDER_KILLIFFROMABOVE
		:parameters (?x - avatar ?y - Missile )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
						(= (last_coordinate_y ?y) (- (coordinate_y ?y) 1))
					)
		:effect (and 
					(assign (last_coordinate_y ?a) (coordinate_x ?a))
					(assign (last_coordinate_y ?a) (coordinate_y ?a))
					(assign (coordinate_x ?a) -1)
					(assign (coordinate_y ?a) -1)
					(decrease (counter_ShootAvatar) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action AVATAR_BUTTERFLY_KILLSPRITE
		:parameters (?x - avatar ?y - enemy )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_ShootAvatar) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action AVATAR_CRAB_KILLSPRITE
		:parameters (?x - avatar ?y - enemy )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_ShootAvatar) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action BOULDER_DIRT_STEPBACK
		:parameters (?x - boulder ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action BOULDER_WALL_STEPBACK
		:parameters (?x - boulder ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action BOULDER_DIAMOND_STEPBACK
		:parameters (?x - boulder ?y - Resource )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action BOULDER_BOULDER_STEPBACK
		:parameters (?x - boulder ?y - Missile )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action ENEMY_DIRT_STEPBACK
		:parameters (?x - enemy ?y - Immovable )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action ENEMY_DIAMOND_STEPBACK
		:parameters (?x - enemy ?y - Resource )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (coordinate_x ?x) (last_coordinate_x ?x))
					(assign (coordinate_y ?x) (last_coordinate_y ?x))
				)
	)

	(:action CRAB_BUTTERFLY_KILLSPRITE
		:parameters (?x - crab ?y - enemy )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_y ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(decrease (counter_enemy) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_moving) 1)
					(decrease (counter_movingStype) 1)
					(decrease (counter_RandomNPC) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action BUTTERFLY_CRAB_TRANSFORMTO
		:parameters (?x - butterfly ?y - enemy )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (and 
					(assign (last_coordinate_x ?x) (coordinate_x ?x))
					(assign (last_coordinate_y ?x) (coordinate_y ?x))
					(assign (last_coordinate_x ?y) (coordinate_x ?y))
					(assign (coordinate_x ?x) -1)
					(assign (coordinate_y ?x) -1)
					(assign (coordinate_x ?y) -1)
					(assign (coordinate_y ?y) -1)
					(decrease (counter_enemy) 1)
					(decrease (counter_enemy) 1)
					(assign (coordinate_x ?z) (last_coordinate_x ?x))
					(assign (coordinate_y ?z) (last_coordinate_y ?x))
					(decrease (counter_moving) 1)
					(decrease (counter_movingStype) 1)
					(decrease (counter_RandomNPC) 1)
					(decrease (counter_Object) 1)
					(decrease (counter_moving) 1)
					(decrease (counter_movingStype) 1)
					(decrease (counter_RandomNPC) 1)
					(decrease (counter_Object) 1)
				)
	)

	(:action EXITDOOR_AVATAR_KILLIFOTHERHASMORE
		:parameters (?x - exitdoor ?y - ShootAvatar )
		:precondition (and 
						(= (coordinate_x ?x) (coordinate_x ?y))
						(= (coordinate_y ?x) (coordinate_y ?y))
					)
		:effect (
				)
	)


)
