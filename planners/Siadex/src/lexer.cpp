#line 2 "src/lexer.cpp"

#line 4 "src/lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 168
#define YY_END_OF_BUFFER 169
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[2456] =
    {   0,
      169,    5,    7,  167,  168,    5,    7,  166,  167,  168,
        8,  168,    5,    7,  167,  168,    5,    7,  164,  167,
      168,    5,    6,  167,  168,    5,    6,    7,  167,  168,
        5,    7,   10,  167,  168,    5,    7,   11,  167,  168,
        5,    7,   78,  167,  168,    5,    7,   77,  167,  168,
        5,    7,  161,  165,  167,  168,    5,    7,  161,  167,
      168,    5,    7,   79,  161,  167,  168,    5,    7,  157,
      161,  167,  168,    5,    7,  167,  168,    2,    5,    7,
      167,  168,    5,    7,   82,  167,  168,    5,    7,   81,
      167,  168,    5,    7,   83,  167,  168,    5,    7,  167,

      168,    5,    7,  159,  161,  167,  168,    5,    7,  139,
      159,  161,  167,  168,    5,    7,  116,  159,  161,  167,
      168,    5,    7,  127,  159,  161,  167,  168,    5,    7,
      159,  161,  167,  168,    5,    7,  159,  161,  167,  168,
        5,    7,  159,  161,  167,  168,    5,    7,  122,  159,
      161,  167,  168,    5,    7,  159,  161,  167,  168,    5,
        7,  159,  161,  167,  168,    5,    7,  118,  159,  161,
      167,  168,    5,    7,  159,  161,  167,  168,    5,    7,
      124,  159,  161,  167,  168,    5,    7,  159,  161,  167,
      168,    5,    7,  159,  161,  167,  168,    5,    7,  159,

      161,  167,  168,    5,    7,  159,  161,  167,  168,    5,
        7,  159,  161,  167,  168,    5,    7,  141,  159,  161,
      167,  168,    5,    7,  162,  167,  168,    5,    7,  163,
      167,  168,    3,    5,    7,  167,  168,    4,    7,  167,
      168,    5,    7,  159,  167,  168,    5,    7,    5,    7,
        5,    7,  166,    8,    5,    7,    5,    7,   85,    5,
        7,    5,    7,    5,    7,  157,    5,    7,  161,    5,
        7,  161,    5,    7,  157,  161,    5,    7,  161,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,

        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,   80,
        5,    7,   86,    5,    7,   84,    5,    7,  160,    5,
        7,  160,    5,    7,  160,    5,    7,  160,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
       92,  159,  161,    5,    7,  159,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,

      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  120,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  150,  159,  161,    5,    7,  159,  161,
        5,    7,   66,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,

      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,    5,    7,    5,
        7,  158,  161,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,

        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,  160,    5,    7,  160,    5,    7,  160,    5,    7,
      160,    5,    7,  159,  161,    5,    7,   65,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,

      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  146,  159,  161,    5,    7,  159,  161,    5,
        7,   64,  159,  161,    5,    7,  159,  161,    5,    7,
      151,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  136,  159,  161,    5,    7,

      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,    5,    7,  158,    5,
        7,    5,    7,   88,    5,    7,    5,    7,    5,    7,
       40,    5,    7,   60,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,

        5,    7,    5,    7,    5,    7,    5,    7,   87,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,   47,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,  160,    5,    7,   98,  160,    5,
        7,  160,    5,    7,  159,  161,    5,    7,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,    5,    7,
        5,    7,  159,  161,    5,    7,   76,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,

        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  142,
      159,  161,    5,    7,  159,  161,    5,    7,  114,  159,
      161,    5,    7,  159,  161,    5,    7,  121,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  119,  159,  161,    5,    7,  117,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  134,  159,  161,    5,
        7,  135,  159,  161,    5,    7,  159,  161,    5,    7,

      159,  161,    5,    7,  159,  161,    5,    7,  113,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,   70,  159,  161,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,   22,    5,    7,    5,    7,    5,    7,   61,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,   91,    5,

        7,    5,    7,    5,    7,   63,    5,    7,    5,    7,
        5,    7,   46,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,   89,    5,    7,    5,    7,
      106,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,  160,    5,    7,  160,    5,    7,  159,
      161,    5,    7,    5,    7,  156,  159,  161,    5,    7,
      159,  161,    5,    7,    5,    7,    5,    7,  159,  161,
        5,    7,  138,  159,  161,    5,    7,  159,  161,    5,

        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,   67,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
        5,    7,  159,  161,    5,    7,  123,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  132,  159,  161,    5,    7,  153,  159,

      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  140,  159,  161,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,   19,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,   90,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,

        5,    7,    5,    7,    5,    7,  107,    5,    7,    5,
        7,    5,    7,   50,    5,    7,    5,    7,    5,    7,
       24,    5,    7,  160,    5,    7,   97,  160,    5,    7,
      133,  159,  161,    5,    7,    5,    7,   73,  159,  161,
        5,    7,  104,    5,    7,    5,    7,  159,  161,    5,
        7,  145,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,   12,  159,  161,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,   26,  159,  161,    5,    7,  159,  161,    5,    7,
       52,  159,  161,    5,    7,  143,  159,  161,    5,    7,

       68,  159,  161,    5,    7,   69,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    1,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,    5,    7,  159,
      161,    5,    7,  159,  161,    5,    7,  159,  161,    5,
        7,  147,  159,  161,    5,    7,  159,  161,    5,    7,
      131,  159,  161,    5,    7,  159,  161,    5,    7,  159,
      161,    5,    7,  137,  159,  161,    5,    7,    5,    7,
        5,    7,    5,    7,   55,    5,    7,    5,    7,    5,
        7,    5,    7,  112,    5,    7,    5,    7,    5,    7,
       25,    5,    7,    5,    7,   58,    5,    7,    5,    7,

        5,    7,    5,    7,    5,    7,    5,    7,   48,    5,
        7,    5,    7,    5,    7,  109,    5,    7,    5,    7,
       23,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,   51,    5,    7,    5,    7,  111,    5,
        7,    5,    7,    5,    7,   59,    5,    7,   30,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,   31,    5,    7,    5,    7,  160,    5,
        7,    5,    7,    5,    7,   93,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  144,  159,  161,    5,    7,  126,  159,  161,

        5,    7,  130,  159,  161,    5,    7,  159,  161,    5,
        7,  125,  159,  161,    5,    7,  148,  159,  161,    5,
        7,    5,    7,  159,  161,    5,    7,   27,  159,  161,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      159,  161,    5,    7,  159,  161,    5,    7,  149,  159,
      161,    5,    7,  159,  161,    5,    7,    5,    7,   49,
        5,    7,  108,    5,    7,    5,    7,    5,    7,    5,
        7,   99,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,   39,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,   20,    5,    7,    5,    7,

       94,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,   21,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
      160,    5,    7,    5,    7,  101,    5,    7,  115,  159,
      161,    5,    7,   75,  159,  161,    5,    7,  128,  159,
      161,    5,    7,   74,  159,  161,    5,    7,   95,    5,
        7,  159,  161,    5,    7,  159,  161,    5,    7,   71,
      159,  161,    5,    7,  159,  161,    5,    7,  159,  161,
        5,    7,  159,  161,    5,    7,    5,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,  102,

        5,    7,    5,    7,   34,    5,    7,    5,    7,    5,
        7,    5,    7,   62,    5,    7,   45,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,   96,  160,    5,    7,  105,
        5,    7,  159,  161,    5,    7,  159,  161,    5,    7,
      152,  159,  161,    5,    7,  129,  159,  161,    5,    7,
      155,  159,  161,    5,    5,    7,  100,    5,    7,   28,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,   54,    5,    7,    5,    7,    5,    7,    5,

        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,   14,    5,    7,
        5,    7,    5,    7,  154,  159,  161,    5,    7,   72,
      159,  161,    5,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,   56,    5,    7,    5,    7,   53,    5,    7,    5,
        7,    5,    7,  110,    5,    7,    5,    7,    5,    7,
       15,    5,    7,    5,    7,    5,    9,    9,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,

        5,    7,   16,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,   57,    5,    7,
        5,    7,   29,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,   13,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,   44,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,  103,    5,    7,    5,    7,

        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,   41,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,   42,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,   17,    5,
        7,    5,    7,    5,    7,    5,    7,   38,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,

        5,    7,    5,    7,    5,    7,    5,    7,    5,    7,
        5,    7,    5,    7,    5,    7,   18,    5,    7,    5,
        7,    5,    7,    5,    7,    5,    7,   32,    5,    7,
        5,    7,   43,    5,    7,    5,    7,    5,    7,    5,
        7,    5,    7,   36,    5,    7,   33,    5,    7,    5,
        7,   37,    5,    7,   35
    } ;

static const flex_int16_t yy_accept[839] =
    {   0,
        1,    1,    1,    2,    6,   11,   13,   17,   22,   26,
       31,   36,   41,   46,   51,   57,   62,   68,   74,   78,
       83,   88,   93,   98,  102,  108,  115,  122,  129,  135,
      141,  147,  154,  160,  166,  173,  179,  186,  192,  198,
      204,  210,  216,  223,  228,  233,  238,  242,  247,  249,
      250,  251,  254,  255,  257,  260,  262,  264,  267,  270,
      273,  277,  280,  282,  284,  286,  288,  290,  292,  294,
      296,  298,  300,  302,  304,  306,  308,  310,  312,  314,
      316,  318,  321,  324,  327,  330,  333,  336,  339,  343,
      347,  351,  355,  359,  364,  367,  371,  375,  379,  383,

      387,  391,  395,  399,  403,  407,  411,  415,  419,  423,
      427,  431,  435,  440,  444,  448,  452,  457,  461,  466,
      470,  474,  478,  482,  486,  490,  494,  498,  502,  506,
      510,  514,  518,  522,  526,  528,  530,  534,  536,  538,
      540,  542,  544,  546,  548,  550,  552,  554,  556,  558,
      560,  562,  564,  566,  568,  570,  572,  574,  576,  578,
      580,  582,  584,  586,  588,  590,  592,  594,  596,  598,
      600,  602,  604,  606,  608,  610,  612,  614,  616,  618,
      620,  623,  626,  629,  632,  636,  641,  645,  649,  651,
      655,  659,  663,  667,  671,  675,  679,  683,  687,  691,

      695,  699,  703,  707,  711,  715,  719,  723,  727,  731,
      736,  740,  745,  749,  754,  758,  762,  766,  770,  774,
      778,  782,  786,  790,  794,  799,  803,  807,  811,  815,
      819,  823,  827,  831,  835,  837,  840,  842,  845,  847,
      849,  852,  855,  857,  859,  861,  863,  865,  867,  869,
      871,  873,  875,  877,  879,  881,  883,  885,  887,  889,
      891,  893,  895,  897,  899,  901,  903,  905,  907,  910,
      912,  914,  916,  918,  920,  922,  924,  926,  928,  930,
      933,  935,  937,  939,  941,  943,  946,  950,  953,  957,
      959,  963,  967,  969,  971,  975,  980,  984,  988,  992,

      996, 1000, 1004, 1008, 1012, 1016, 1020, 1024, 1028, 1033,
     1037, 1042, 1046, 1051, 1055, 1059, 1063, 1068, 1073, 1077,
     1081, 1085, 1090, 1095, 1099, 1103, 1107, 1112, 1116, 1120,
     1124, 1128, 1132, 1136, 1140, 1144, 1148, 1152, 1157, 1159,
     1161, 1163, 1165, 1167, 1169, 1171, 1174, 1176, 1178, 1181,
     1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1200, 1202,
     1204, 1207, 1209, 1211, 1214, 1216, 1218, 1220, 1222, 1224,
     1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244,
     1247, 1249, 1252, 1254, 1256, 1258, 1260, 1262, 1265, 1268,
     1272, 1274, 1279, 1283, 1285, 1287, 1291, 1296, 1300, 1304,

     1308, 1312, 1316, 1320, 1324, 1328, 1332, 1336, 1340, 1344,
     1348, 1353, 1357, 1361, 1365, 1369, 1371, 1375, 1380, 1384,
     1388, 1392, 1397, 1402, 1406, 1410, 1414, 1418, 1422, 1427,
     1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447,
     1449, 1451, 1453, 1455, 1457, 1459, 1461, 1464, 1466, 1468,
     1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488,
     1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1508, 1510,
     1512, 1515, 1517, 1519, 1522, 1525, 1529, 1534, 1536, 1541,
     1544, 1546, 1550, 1555, 1559, 1563, 1568, 1572, 1576, 1580,
     1585, 1589, 1594, 1599, 1604, 1609, 1613, 1617, 1622, 1626,

     1628, 1632, 1636, 1640, 1645, 1649, 1654, 1658, 1662, 1667,
     1669, 1671, 1673, 1676, 1678, 1680, 1682, 1685, 1687, 1689,
     1692, 1694, 1697, 1699, 1701, 1703, 1705, 1707, 1710, 1712,
     1714, 1717, 1719, 1722, 1724, 1726, 1728, 1730, 1732, 1735,
     1737, 1740, 1742, 1744, 1747, 1750, 1752, 1754, 1756, 1758,
     1760, 1762, 1765, 1767, 1770, 1772, 1774, 1779, 1783, 1787,
     1791, 1796, 1801, 1806, 1810, 1815, 1820, 1822, 1826, 1831,
     1835, 1839, 1843, 1847, 1852, 1856, 1858, 1861, 1864, 1866,
     1868, 1870, 1873, 1875, 1877, 1879, 1881, 1883, 1886, 1888,
     1890, 1892, 1894, 1897, 1899, 1902, 1904, 1906, 1908, 1910,

     1912, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1932,
     1934, 1937, 1942, 1947, 1952, 1957, 1960, 1964, 1968, 1973,
     1977, 1981, 1985, 1987, 1988, 1990, 1992, 1994, 1996, 1998,
     2001, 2003, 2006, 2008, 2010, 2012, 2015, 2018, 2020, 2022,
     2024, 2026, 2028, 2030, 2032, 2034, 2036, 2038, 2040, 2042,
     2044, 2048, 2051, 2055, 2059, 2064, 2069, 2074, 2075, 2075,
     2078, 2081, 2083, 2085, 2087, 2089, 2091, 2094, 2096, 2098,
     2100, 2102, 2104, 2106, 2108, 2110, 2112, 2114, 2116, 2119,
     2121, 2123, 2128, 2133, 2134, 2134, 2136, 2138, 2140, 2142,
     2144, 2146, 2148, 2150, 2153, 2155, 2158, 2160, 2162, 2165,

     2167, 2169, 2172, 2174, 2176, 2178, 2179, 2181, 2183, 2185,
     2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2204, 2206,
     2208, 2210, 2212, 2214, 2216, 2218, 2220, 2222, 2224, 2226,
     2229, 2231, 2234, 2236, 2238, 2240, 2242, 2245, 2247, 2249,
     2251, 2253, 2256, 2258, 2260, 2262, 2264, 2266, 2268, 2270,
     2272, 2274, 2276, 2278, 2280, 2282, 2284, 2286, 2288, 2290,
     2292, 2294, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311,
     2313, 2315, 2317, 2320, 2322, 2324, 2326, 2328, 2330, 2332,
     2334, 2336, 2338, 2340, 2342, 2344, 2346, 2348, 2350, 2352,
     2354, 2356, 2359, 2361, 2363, 2365, 2367, 2370, 2372, 2374,

     2376, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395,
     2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415,
     2418, 2420, 2422, 2424, 2426, 2429, 2431, 2434, 2436, 2438,
     2440, 2442, 2445, 2448, 2450, 2453, 2456, 2456
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    7,    8,
        9,   10,   11,    1,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,   21,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,    1,   49,    1,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,    1,   78,    1,    1,    1,   79,    1,
        1,    1,    1,    1,    1,   80,   79,    1,    1,    1,
       79,    1,    1,    1,   79,    1,   79,    1,    1,    1,
        1,    1,    1,   79,    1,   81,    1,    1,    1,    1,
       79,    1,    1,    1,    1,    1,    1,    1,   79,    1,
        1,    1,   79,    1,    1,    1,   79,    1,   79,    1,
        1,    1,    1,    1,    1,   79,    1,   81,    1,    1,
        1,    1,   81,    1,   79,    1,    1,    1,    1,    1,

       81,    1,    1,    1,   81,    1,    1,    1,   81,    1,
       81,    1,    1,    1,    1,    1,    1,   81,    1,   81,
        1,    1,    1,    1,   81,    1,    1,    1,    1,    1,
        1,    1,   81,    1,    1,    1,   81,    1,    1,    1,
       81,    1,   81,    1,    1,    1,    1,    1,    1,   81,
        1,   81,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[847] =
    {   0,
        0,    0,  131,   76,   81, 4910,   82,   78,    0,   83,
       84,   85,   86,   87,  165,  246,    0,   81,  323,  100,
      101,  109,  110,  401,  479,  535,   83,   78,  163,  164,
      165,  166,  242,  171,  243,  584,  245,  244,  399,  409,
      398,  316,  557,  121,  129,  133,    0,  656,  134,    0,
        0,  139, 4910,  255,  138,  326,  319,  556,  113,    0,
       88,  115,  558,  662,  647,  687,  663,  560,  685,  686,
      620,  747,  694,  676,  739,  238,  733,  783,  764,  756,
      773,  162,  209,  243,  861,  941,  302,  247,  406,  805,
      858,  859,  860,  914, 1021,  865,  937,  938,  945, 1017,

     1024,  940, 1019, 1045, 1075, 1080, 1077, 1082, 1094, 1121,
     1131, 1133, 1138, 1168, 1178, 1189, 1195, 1200, 1217, 1223,
     1245, 1247, 1235, 1275, 1290, 1302, 1307, 1309, 1341, 1356,
     1324, 1358, 1363, 1364,  774,  567,   97,  762,  776,  601,
      618,  290,  765,  852,  603, 1402,  853, 1060,  754, 1040,
     1140, 1136, 1349, 1146, 1229, 1359, 1258, 1406, 1281,  393,
     1321, 1381,  979, 1415, 1366,  830, 1422, 1408, 1434, 1400,
     1423, 1445, 1437, 1443, 1449, 1451, 1468, 1452, 1457, 1444,
       76,   84,  405,  725, 1498, 1508, 1506, 1525, 1546, 1543,
     1553, 1555, 1579, 1587, 1601, 1606, 1611, 1641, 1646, 1647,

     1664, 1665, 1695, 1700, 1705, 1712, 1746, 1722, 1756, 1757,
     1780, 1768, 1802, 1774, 1804, 1819, 1821, 1836, 1858, 1864,
     1870, 1875, 1885, 1907, 1909, 1924, 1941, 1948, 1930, 1931,
     1965, 1971, 1982, 1988, 1760,  688,  768,  364, 1466, 1706,
      366,  648, 2013, 1584,  896, 1987, 1849, 2007, 1544, 1740,
     1880, 1062, 2026, 2019, 1214, 2016, 1597, 1814, 1441, 1675,
     2036, 1565, 2049, 2028, 2039, 2051, 2048, 2057,  827, 2062,
     2055, 2058, 2066, 1633, 2070, 1273, 2040, 2043, 2090, 1731,
     2092, 2099, 2117, 2122, 2125,  805,  167,  251, 2112, 2153,
     2143, 2157, 2126, 2150, 2158, 2180, 2197, 2208, 2207, 2214,

     2215, 2225, 2255, 2262, 2260, 2274, 2272, 2279, 2296, 2313,
     2306, 2320, 2318, 2330, 2332, 2354, 2364, 2369, 2371, 2381,
     2376, 2388, 2395, 2403, 2425, 2435, 2443, 2446, 2453, 2461,
     2483, 2489, 2501, 2506, 2511, 2523, 2538, 2555, 2439, 2480,
     2529, 2527, 2565, 2548, 2537, 1786, 2410, 2199, 1793, 2144,
     2574, 2580, 2154, 2566, 2581, 2285, 2584, 1863, 2577, 2582,
     2056, 2592, 2594, 2595, 2603, 2597, 2605, 2606, 2446, 2614,
     2613, 2610, 2625, 2623, 2639, 2635, 2655, 2651, 2673, 2146,
     2668, 2681, 2687, 2683, 2684, 2692, 2688,  665, 1020, 2705,
     2696, 2681, 2728, 2691, 2702, 2745, 2746, 2756, 2764, 2786,

     2767, 2791, 2801, 2822, 2803, 2825, 2844, 2846, 2849, 2861,
     2872, 2900, 2889, 2895, 2906, 2931, 2932, 2934, 2949, 2960,
     2966, 2971, 2988, 2990, 3005, 3016, 3022, 3024, 3039, 2771,
     2903, 2814, 2960, 3026, 3064, 2988, 2626, 2700, 3053, 3062,
     3070, 3031, 3093, 3079, 3081, 3097, 2447, 3087, 3107, 3096,
     3102, 3089, 3113, 3104, 3105, 3100, 3124, 3131, 3139, 2724,
     3119, 3163, 3143, 3148, 3130, 3140, 3132, 2731, 3198, 3182,
     2775, 3175, 3184, 2891, 3177,  249, 3204, 3218, 3216, 2900,
     3190, 3231, 3248, 3255, 3253, 3272, 3294, 3279, 3289, 3306,
     3313, 3311, 3328, 3330, 3347, 3352, 3354, 3364, 3378, 3393,

     3405, 3404, 3415, 3422, 3452, 3450, 3462, 3467, 3473, 3459,
     3488, 3490, 3034, 3504, 3478, 3517, 3122, 3473, 3509, 3199,
     3519, 3222, 3530, 3496, 3319, 3502, 3527, 3285, 3540, 3533,
     3298, 3479, 3323, 3534, 3538, 3547, 3548, 3543, 3481, 3577,
     3546, 3575, 3563, 3566, 3569, 3586, 3583, 3592, 3590, 3603,
     3580, 3607, 3609, 1224, 3623, 3628, 3597, 3620, 3650, 3656,
     3664, 3674, 3682, 3696, 3701, 3704, 3666, 3727, 3719, 3741,
     3753, 3755, 3777, 3763, 3785, 3759, 3614, 3629, 3660, 3764,
     3778, 3639, 3821, 3769, 3823, 3792, 3807, 3636, 3795, 3835,
     3829, 3852, 3668, 3840, 3742, 3855, 3844, 3846, 3866, 3837,

     3785, 3833, 3869, 3870, 3883, 3876, 3862, 3898,  549, 3877,
     3854, 3920, 3927, 3930, 3932, 3873, 3938, 3964, 3966, 3981,
     3983, 4000, 3937, 3885, 3906, 3896, 3996, 3967, 4010, 3921,
     3966, 3923, 4011, 3974, 4021, 4006, 4018, 4042, 4022, 4025,
     4051, 4054, 4057, 4056, 4058, 4063, 4059, 4061, 4067, 4080,
      296, 4065, 4085, 4120, 4121, 4122, 4139, 4085,  105, 4150,
     4088, 4127, 4132, 4156, 4151, 4161, 4108, 4164, 4158, 4168,
     4179, 4181, 4190, 4185, 4186, 4200, 4193, 4211, 4187, 4212,
     4219, 4215, 4217,  101,   86, 4229, 4249, 4254, 4220, 4260,
     4255, 4269, 4261, 4208, 4286, 4217, 4281, 4271, 4224, 4290,

     4288, 4252, 4295, 4297,    0, 4910, 4298, 4300, 4315, 4305,
     4309, 4308, 4312, 4317, 4310, 4352, 4351, 4320, 4346, 4374,
     4331, 4329, 4350, 4376, 4355, 4386, 4394, 4391, 4395, 4356,
     4397, 4361, 4396, 4399, 4411, 4415, 4398, 4432, 4437, 4405,
     4440, 4406, 4421, 4441, 4462, 4438, 4434, 4453, 4456, 4476,
     4482, 4488, 4485, 4497, 4492, 4500, 4499, 4491, 4507, 4498,
     4517, 4496, 4535, 4519, 4522, 4546, 4505, 4542, 4529, 4565,
     4573, 4551, 4536, 4575, 4578, 4584, 4586, 4588, 4585, 4592,
     4590, 4596, 4598, 4597, 4616, 4600, 4628, 4632, 4641, 4629,
     4643, 4599, 4652, 4666, 4665, 4673, 4606, 4674, 4679, 4675,

     4615, 4684, 4683, 4681, 4686, 4691, 4709, 4699, 4708, 4695,
     4702, 4720, 4729, 4716, 4703, 4734, 4742, 4735, 4770, 4621,
     4765, 4768, 4776, 4779, 4717, 4783, 4722, 4782, 4784, 4786,
     4787, 4777, 4785, 4790, 4791, 4796, 4910, 4874, 4878, 4881,
     4885, 4889, 4893, 4897, 4901, 4905
    } ;

static const flex_int16_t yy_def[847] =
    {   0,
      837,    1,  837,  838,  838,  837,  838,  838,  839,  838,
      838,  838,  838,  838,  840,  840,   16,   16,  838,  838,
      838,  838,  838,  841,  837,   25,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  838,  838,  838,  842,  843,  838,  839,
      842,  838,  837,  838,  838,  838,  838,  838,   16,   16,
       16,   16,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  844,  844,   86,   86,   26,   26,
       26,   26,   26,   26,  843,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  838,  838,   16,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
       86,   86,   86,   86,   26,   26,   26,   26,  838,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,   86,   86,   86,   26,  838,
       26,   26,  838,  838,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,   86,   86,   26,
      838,   26,   26,  838,  838,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  838,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,   86,   86,   26,  838,   26,  838,
      838,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  838,

       26,   26,   26,   26,   26,   26,   26,   26,   26,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,   86,  838,  838,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  838,   26,   26,   26,
       26,   26,   26,   26,   26,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,   86,  838,
      838,   26,   26,   26,   26,  838,   26,   26,   26,   26,
       26,   26,  838,  845,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
       86,  838,   26,   26,   26,   26,   26,  845,  846,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,   26,   26,  839,  837,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  839,  837,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,    0,  837,  837,  837,
      837,  837,  837,  837,  837,  837
    } ;

static const flex_int16_t yy_nxt[4992] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       31,   31,   31,   34,   35,   36,   37,   38,   31,   39,
       40,   41,   42,   43,   31,   31,   31,   44,   45,   16,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   31,
       31,   31,   34,   35,   36,   37,   38,   31,   39,   40,
       41,   42,   43,   31,   31,   31,   46,   47,   31,   48,
       48,   50,   52,   50,   53,   54,   50,   50,   50,   50,
       50,   50,   50,   62,  706,   61,   55,   57,   57,   56,

       62,   58,   61,  101,   99,   50,   50,  102,   89,  705,
      685,  137,   89,  103,   50,   50,   89,  181,  100,   82,
       83,   89,  286,   57,   59,  181,   50,   61,   84,  137,
      837,  837,  101,   99,   50,  837,  102,   89,   50,   50,
       52,   89,  103,   50,   50,   89,  181,  100,  837,  837,
       89,  286,  837,   51,  181,   51,  837,  837,   51,   51,
       51,   51,   51,   51,   51,   49,   49,   50,   49,   49,
       50,   49,   49,   49,   49,   57,   59,   51,   51,   61,
       49,   49,   49,   49,   49,   49,   51,   51,   89,   89,
       89,  109,  104,   89,   89,   89,  112,  105,   51,  108,

       89,   89,   89,   89,   89,  106,   51,  107,  181,   89,
       51,   51,   49,   49,   50,   51,   51,   89,   89,   89,
      109,  104,   89,   89,   89,  112,  105,  837,  108,   89,
       89,   89,   89,   89,  106,  837,  107,  181,   89,   51,
      837,   49,   51,   50,   49,   49,   49,   49,   50,   49,
       49,   50,   49,   49,   49,   49,   49,   53,   54,  837,
       50,   49,   49,   49,   49,   49,   49,   89,  113,   89,
       89,   89,   89,   89,   89,  110,  111,  121,  114,  169,
       89,   89,   89,  122,  837,  123,   51,  184,  181,  389,
      181,  837,  181,   49,   49,   50,   89,  113,   89,   89,

       89,   89,   89,   89,  110,  111,  121,  114,  169,   89,
       89,   89,  122,  242,  123,   51,  184,  181,  389,  181,
       51,  181,   49,   51,   50,   49,   49,   63,   50,   57,
       57,   50,   51,   58,  837,  837,  183,  181,  837,  837,
      837,  131,  242,  181,   64,  132,   65,   66,   67,   68,
       69,   70,   71,  837,   89,  135,   72,   73,   74,   75,
       76,   77,   78,   79,   80,  183,  181,   51,   81,   50,
      131,   50,  181,   64,  132,   65,   66,   67,   68,   69,
       70,   71,  837,   89,  135,   72,   73,   74,   75,   76,
       77,   78,   79,   80,  837,  837,   51,   81,   50,  837,

       51,   49,   49,   51,   49,   49,   50,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,  124,   89,  125,   86,   87,   89,   89,  287,
      127,   89,  130,  263,  128,   89,   89,   89,   89,  126,
       88,   51,  129,   51,   89,  837,  181,   89,   49,   49,
       49,  124,   89,  125,   86,   87,   89,   89,  287,  127,
       89,  130,  263,  128,   89,   89,   89,   89,  126,   88,
       51,  129,  837,   89,  837,  181,   89,   49,   51,   49,
       49,  837,   49,   49,   50,   49,   49,   49,   49,   49,
       89,   89,   60,   89,   49,   49,   49,   49,   49,   49,

       89,   89,   89,   89,   89,   89,   90,   89,   89,   89,
       89,   89,   89,   91,   89,   92,   89,   89,   93,   94,
       89,   89,   89,   89,   89,   89,   49,   49,   89,   89,
       89,   89,   89,   89,   89,   90,   89,   89,   89,   89,
       89,   89,   91,   89,   92,   89,   89,   93,   94,   89,
       89,   89,   89,   89,   89,   49,   51,   89,   95,   95,
       96,   50,   89,   50,   97,   50,  837,  837,  136,   89,
       58,   89,   50,   98,   89,   89,  837,  837,  133,  837,
      837,  236,   89,  651,  837,  134,   89,  138,  837,   96,
      181,   89,  153,   97,  837,   89,  837,  837,   89,  837,

       89,  154,   98,   89,   89,  115,   50,  133,   50,   89,
      116,   89,  651,   89,  134,   89,  138,  837,  117,  181,
      118,  153,  119,   50,   89,   50,  120,  837,  837,  239,
      154,  837,  837,   51,  115,   51,  837,   51,   89,  116,
      837,  240,   89,  837,   51,  837,  837,  117,  245,  118,
      241,  119,   50,   50,  158,  120,   49,   49,  239,   49,
       49,   50,   49,   49,   49,   49,   49,   50,   50,   49,
      240,   49,   49,   49,   49,   49,   49,  245,   51,  241,
       51,   50,  143,  158,  139,  140,  141,  837,  144,  150,
       50,   50,   50,   50,  837,   51,  837,   51,  164,   50,

      151,  142,  236,   49,   49,  475,  181,  152,  145,  837,
      837,  143,  146,  139,  140,  141,  147,  144,  150,  163,
      155,  156,  148,  837,   51,   51,  157,  164,  149,  151,
      142,  837,   49,   51,  475,  181,  152,  145,   50,   51,
       51,  146,  837,  837,   50,  147,  288,  837,  163,  155,
      156,  148,   50,   51,  170,  157,  837,  149,  171,   50,
      165,   50,   51,   51,   51,   51,  181,   50,  159,   50,
       50,   51,  160,   50,  166,  288,  161,  167,   50,   50,
      837,   50,  162,  170,  168,  176,  837,  171,   50,  165,
      179,  837,  251,  177,  837,  181,  237,  159,  180,  243,

      340,  160,  837,  166,  837,  161,  167,  235,  172,  178,
       51,  162,  837,  168,  176,  238,   51,  837,  173,  179,
      174,  251,  177,  175,   51,  237,  388,  180,  243,  340,
      185,   51,   50,   51,   89,   50,  235,  172,  178,   51,
      837,   51,   51,   89,  238,   51,  181,  173,  837,  174,
       51,   51,  175,   51,  837,  388,  837,   50,   50,  185,
       51,   49,   49,   89,   49,   49,   50,   49,   49,   49,
       49,   49,   89,  269,   49,  181,   49,   49,   49,   49,
       49,   49,  186,   89,   89,   89,  837,   89,   89,   89,
       89,  244,  249,  837,   89,  187,   89,   89,   89,  188,

      837,   50,  269,   89,   51,  190,  837,   51,   49,   49,
      837,  186,   89,   89,   89,  189,   89,   89,   89,   89,
      244,  249,  837,   89,  187,   89,   89,   89,  188,   51,
       51,  837,   89,  837,  190,  346,  837,   49,   51,   89,
       49,   49,   49,   89,   49,   49,   50,   49,   49,   49,
       49,   49,   89,  837,   49,  837,   49,   49,   49,   49,
       49,   49,   89,  192,  346,   89,   89,   89,   89,   89,
       89,  191,   89,   51,   89,   89,   89,  837,   89,  198,
      837,   89,  182,   89,   50,  837,  193,  837,   49,   49,
      837,   89,  192,  837,   89,   89,   89,  837,   89,   89,

      191,  837,  837,   89,   89,   89,  266,   89,  198,  837,
      837,  182,   89,  837,  837,  193,  837,   49,   51,  837,
       49,   49,   49,  837,   49,   49,   50,   49,   49,   49,
       49,   49,  837,  837,   49,  266,   49,   49,   49,   49,
       49,   49,   89,  837,   89,   50,   89,  195,   89,   89,
      196,  194,  199,   89,  837,   89,   51,   89,  837,  200,
      476,  181,   89,  197,  837,   50,  252,   50,   49,   49,
       89,   89,  837,   89,   89,   89,  195,   89,   89,  196,
      194,  199,   89,   89,   89,  201,   89,  353,  200,  476,
      181,   89,  197,  250,  837,  252,  202,   49,   51,   89,

       89,  203,   89,   89,   89,   89,  204,   89,  837,   89,
      837,   89,   89,   89,  201,   89,  353,   51,   89,   89,
      205,  837,  250,   89,  837,  202,  206,  837,  837,   89,
      203,   89,   89,   89,   89,  204,   89,   51,   89,   51,
       89,   50,   89,  837,   89,   50,   89,   89,   89,  205,
       89,   50,   89,  837,  208,  206,   89,  207,   89,   89,
       89,   89,   89,   89,  837,  254,  210,   89,  837,   89,
      209,   89,  837,  837,  837,   89,   89,  837,  837,   89,
      256,  253,  211,  208,  837,   89,  207,   89,   89,   89,
      837,   89,   89,   89,  254,  210,   89,   89,   89,  209,

       89,  213,  837,   89,  837,   89,   89,   89,  212,  256,
      253,  211,  837,   51,   89,  214,   89,   51,   89,   50,
       89,  837,   89,   51,   89,   89,   89,   89,  837,   89,
      213,  837,   89,   89,   50,   89,   89,  212,   89,  356,
      215,  837,   89,   89,  214,   89,   89,   89,  216,   89,
      257,  837,   89,   89,   89,   89,   89,  837,   89,  609,
       89,   89,   89,   50,  222,  181,  217,   89,  356,  215,
       89,   89,  219,   89,   89,   89,  220,  216,   50,  257,
      218,   89,  221,   89,   89,   89,   50,  837,  609,   89,
       89,   51,  259,  222,  181,  217,  223,  837,  837,   89,

       89,  219,   89,   89,   89,  220,   51,  837,  378,  218,
      262,  221,   89,   89,   89,   89,  837,  837,  837,   89,
      837,  259,  224,  226,  837,  223,   50,   89,   89,   89,
      225,   89,   89,   89,   89,   51,   89,  378,   89,  262,
       89,  837,   89,  837,   89,   89,  227,  228,   89,   89,
       51,  224,  226,   89,   50,  264,   89,   89,   51,  225,
       89,   89,  231,   89,   50,   89,   89,   89,  837,   89,
       89,   50,  837,  837,   89,  227,  228,  229,   89,   89,
      230,   89,   89,  232,  264,   89,   50,   89,   89,  234,
      255,  231,   89,   89,   89,   89,   89,  837,   51,   89,

      258,   89,   89,  233,  268,   50,  229,   50,   89,  230,
       89,   50,  232,   50,   89,  265,   89,   89,  234,  255,
       50,   89,   89,   89,  246,   89,   51,   50,   50,  258,
       89,   89,  233,  268,  274,  260,   51,  272,  261,   50,
      247,  248,   50,   51,  265,  267,   50,  270,   50,   50,
       50,  271,  360,  246,   50,  273,   50,   50,   51,  837,
      275,  837,   50,  274,  260,  285,  272,  261,  276,  247,
      248,   50,  837,   50,  267,  277,  270,   51,  280,   51,
      271,  278,  837,   51,  273,   51,  284,  279,  283,  275,
      281,  837,   51,  837,  285,  341,  837,  276,  837,   51,

       51,  282,  837,  837,  277,  837,  837,  280,  837,  290,
      278,   51,  837,  837,   51,  284,  279,  283,   51,  281,
       51,   51,   51,   89,  341,  837,   51,   89,   51,   51,
      282,   89,  289,   89,   51,   89,   89,   89,  291,  837,
      837,  837,  837,   51,   89,   51,   89,  189,  837,   50,
       89,   50,   89,  837,  292,  837,   89,  837,  837,  837,
       89,  289,   89,   89,   89,   89,   89,  291,   89,  837,
       50,  293,   89,   89,  350,   89,  297,  296,   89,   89,
       89,   89,   89,  292,   89,  294,  295,  837,  837,   50,
      837,   89,   89,   89,  837,  837,  837,   89,  837,  363,

      293,   89,   50,  350,   89,  297,  296,   89,   89,   89,
       89,   89,   89,   89,  294,  295,   89,   89,  298,  837,
       89,   51,   89,   51,  345,   89,   89,  299,  363,  358,
       89,   89,  837,   89,  302,  301,   89,   89,   50,  300,
       89,   89,   51,  837,   89,   89,   89,  298,  837,   89,
      837,  837,  837,  345,   89,   89,  299,  376,  358,   89,
       89,   51,  303,  302,  301,   89,   89,  305,  300,   89,
       89,   89,   89,   89,   51,   89,   89,  304,   89,   89,
       50,  837,  837,  306,   89,   89,  376,  308,  837,   89,
       89,  303,  307,   89,   89,   89,  305,  837,  837,   89,

       89,   89,   89,   89,   89,   89,  304,  837,   89,  837,
       51,   50,  306,   89,   89,  361,  308,  837,   89,   89,
       89,  307,   89,   89,   89,   89,  312,  309,  837,   89,
       89,   89,   89,   89,   89,  342,   50,   89,   89,  310,
      311,   89,  837,   89,  361,   50,  837,   89,  313,   89,
       89,   89,   51,   89,   89,  312,  309,  837,   89,   89,
      315,  351,   89,   89,  342,   50,   89,   89,  310,  311,
       89,   89,   89,  837,  837,   89,   89,  313,  314,   89,
       89,   89,   89,   51,   89,   89,   89,  837,  837,  315,
      351,   50,  316,   89,   89,   89,  339,   89,   50,   89,

       89,  837,  837,   89,   89,   89,   89,  314,   51,   89,
       89,   89,   89,   89,   89,   89,  317,   51,   89,   50,
      318,  316,   89,   89,   89,  339,   89,   89,   89,   89,
      837,   89,   89,  320,   89,   89,  837,   51,   89,  837,
       89,   89,   89,  319,   89,  317,   89,   89,   89,  318,
       89,  837,  359,  837,   50,  322,   89,  321,   89,   89,
       89,   89,  320,   51,  837,   89,  837,  837,   50,   89,
       51,   89,  319,   89,   89,   89,  323,   89,  348,   89,
      837,  359,  324,   89,  322,   50,  321,   89,   89,   89,
       89,   51,  326,   89,   89,   89,   89,  837,  325,   89,

       89,  352,   89,   89,   89,  323,  837,  348,   89,  837,
       89,  324,   89,   89,   89,  327,   89,  328,   89,  837,
      837,  326,   89,   89,   89,   89,   51,  325,   89,   89,
      352,   89,  329,   89,   89,  837,   89,   89,   89,   89,
       51,  837,   89,   89,  327,   89,  328,   89,  837,   89,
      837,  837,   89,   89,  333,   89,   89,   51,  837,   89,
      334,  329,   89,   89,  330,   89,   89,   89,   89,   89,
       89,  837,  331,   89,   89,  837,   89,   89,   89,   89,
      837,  332,   89,  333,   89,   89,   89,  335,   89,  334,
       89,   89,   50,  330,   89,   89,   89,   89,   89,   89,

       89,  331,   89,   89,  837,  337,   89,   89,   89,   89,
      332,   89,   50,   89,  336,   89,  335,   89,   50,   89,
       89,   50,  338,   89,   50,   89,   89,  837,  347,   89,
      349,   50,   89,   50,  337,  837,   89,  343,   89,  357,
       89,   50,   89,  336,   50,   50,   89,  354,   50,   89,
      837,  338,  344,   50,   50,   89,   50,  347,  355,  349,
       50,   50,   50,   50,   51,  362,  343,   50,  357,  366,
      364,   50,  368,  369,  837,   50,  354,  365,  370,  367,
      379,  344,  837,  380,   51,  371,  372,  355,  837,  373,
       51,  837,  374,   51,  362,   50,   51,   50,  366,  364,

      375,  368,  369,   51,   50,   51,  365,  370,  367,  379,
      837,  377,  380,   51,  371,  372,   51,   51,  373,  381,
       51,  374,   50,  382,  383,   51,   51,   50,   51,  375,
       50,   50,   51,   51,   51,   51,  390,   89,  837,   51,
      377,   89,  384,   51,  837,  837,  385,   51,  381,   50,
       89,   50,  382,  383,  290,   50,  837,  837,   50,   50,
      394,  837,  837,  387,  386,  390,   89,   51,   89,   51,
       89,  384,   89,  837,  837,  385,   51,  442,  391,   89,
      837,   89,   89,  396,  393,  439,   89,   89,  392,  394,
      395,  837,  387,  386,   51,   89,   89,   89,  837,   51,

      837,   89,   51,   51,   50,   89,  442,  391,  837,   89,
       89,   89,  396,  393,  439,   89,   89,  392,   89,  395,
      837,   51,   89,   51,   89,   89,   89,   51,  397,  398,
       51,   51,   89,   89,   89,   89,  399,   89,   89,  400,
       89,  438,  837,   89,   89,   89,   89,   89,  837,  401,
       89,   89,   89,   89,   89,   89,  837,  397,  398,  837,
      837,   89,   89,  402,   89,  399,   89,  837,  400,   89,
      438,  837,   89,   89,   89,   89,   51,  403,  401,   89,
       89,   89,   89,   89,   89,   89,  837,   89,  837,  405,
       50,   89,  402,   89,  404,  406,  837,  407,   89,   89,

       89,   89,  837,   89,   89,  837,  403,  837,   89,   89,
       89,  408,   89,   89,   89,  837,   89,   89,  405,  445,
       89,   89,   89,  404,  406,   89,  407,   89,   89,   89,
       89,   89,   89,   89,   89,   89,  837,   89,   89,   89,
      408,   89,   89,   89,   89,   89,   89,   89,  445,   89,
       89,   89,  410,  409,   89,   89,   89,  412,   89,   89,
       89,   89,   51,   89,   89,  837,  837,   89,   89,  837,
       89,   89,   89,   89,   89,  411,   89,  416,   89,  413,
       89,  410,  409,   89,   89,   89,  412,   89,   89,   89,
       89,  837,   89,   89,   89,  837,   89,   89,   89,   89,

       89,   89,   89,  837,  411,   89,   89,   89,  413,   89,
       89,  414,   89,   89,   89,   50,  415,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,  417,   89,   89,   89,   89,  437,   89,   89,
      414,   89,   89,   89,   50,  415,   89,  837,   89,   89,
       89,   50,   50,   89,   89,   89,  837,   89,  837,  837,
       89,  417,   89,   89,   89,  418,  437,  419,   89,  456,
       89,  420,   89,   89,  430,   89,  421,  837,   89,   89,
      837,   89,   89,   89,   89,   50,  422,   51,  837,   89,
       89,   89,   89,   89,  418,  837,  419,   89,  456,   89,

      420,   89,   89,  430,   89,  421,  837,   89,   89,  431,
       89,   89,   89,   89,   89,  422,   51,  837,   89,   89,
       89,   89,  423,   51,   51,  837,   89,   89,   89,  424,
      425,   89,   50,  837,   50,   89,   89,   89,  431,   89,
       89,   89,   50,   89,   89,  426,  427,   89,  428,   89,
       89,  423,   89,   50,  432,   89,   89,   51,  424,  425,
       89,   89,  433,   89,   89,   89,  429,   89,   89,   89,
       50,   50,  436,   89,  426,  427,   89,  428,   89,   50,
       89,   89,   50,  432,   89,   50,   50,   50,  435,   50,
       89,  433,   89,   89,  434,  429,   89,   50,  443,   50,

       50,  436,   50,  440,   51,   89,   51,  448,   50,   89,
       50,   50,  837,   89,   51,   50,  447,  435,   50,   50,
      441,  444,   89,  434,  446,   51,  449,  443,   50,  837,
       50,   50,  440,  454,  450,  451,  448,  453,  452,  459,
       50,  517,   51,   51,   50,  447,  455,  457,  458,  441,
      444,   51,  461,  446,   51,  449,   50,   51,   51,   51,
       50,   51,  454,  450,  451,  460,  453,  452,  459,   51,
      463,   51,   51,   50,   51,  455,  457,  458,   50,  462,
       51,  461,   51,   51,  464,  465,   50,   51,   50,   50,
       51,   51,   50,   50,  460,  466,   50,   50,  469,  463,

       51,   50,   51,   51,  467,   50,   89,   50,  462,  837,
       89,  470,   51,  464,  465,  480,   51,  473,  472,   89,
      468,  837,  471,  481,  466,  518,  477,  474,   51,   50,
       89,  837,   51,  467,   89,   89,   50,  837,  478,   89,
      470,  837,  546,   89,  480,   51,  473,  472,   89,  468,
       51,  471,  481,   89,  518,  477,  474,   89,   51,   89,
       51,   51,  479,   89,   51,   51,   89,  478,   51,   51,
      482,   89,   89,   51,   89,   89,   50,   51,  837,   51,
       50,   89,   89,   89,   89,   89,   89,  837,  483,   89,
      837,  479,  486,   89,   89,   89,   89,  837,  484,  482,

       89,   51,   89,   89,   89,   89,  837,  485,   51,  510,
       89,   89,   89,   89,   89,   89,   89,  483,   89,   50,
      487,  486,   89,   89,   89,   89,   89,  484,   89,   89,
       89,   89,   89,  488,   89,  837,  485,  490,  510,   89,
       89,   89,  837,  489,   89,   89,  837,   89,   51,  487,
       89,   89,   51,   89,   89,   89,  512,   89,   89,   89,
       89,   89,  488,   89,  837,  491,  490,  837,   89,   89,
       89,  493,  489,   89,   89,   89,   89,  837,   89,   89,
       89,  837,  492,   89,   89,  512,   89,   89,  494,   89,
       89,   51,   89,  495,  491,  837,   50,   89,   89,   89,

      493,   89,   89,   89,   89,   50,  837,   89,   50,  837,
       89,  492,  497,   89,   89,   89,   89,  494,   89,   89,
      498,  496,  495,  837,   89,   89,   89,   89,   89,   89,
       89,   89,  416,   89,  837,   89,   50,  511,   89,   89,
      499,  497,  837,   89,   89,  837,  837,   89,  837,  498,
      496,  837,  500,   89,   89,  501,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   50,  511,   89,   51,  499,
       89,  503,   89,   89,  502,  837,  837,   51,   89,  837,
       51,  500,  837,  837,  501,   89,   89,   89,   89,   89,
       89,   89,   89,   50,  513,   89,   89,  837,   89,   89,

       89,   89,  837,  502,   89,  837,  504,   89,   51,   89,
      837,  505,  837,   89,   89,   89,   89,   89,   89,   89,
       89,  516,  837,  513,   89,   89,   89,   89,   89,   89,
       89,   50,  837,   89,   89,  504,   50,   51,   89,   50,
      505,   89,   89,  506,   89,   89,   89,   89,   89,   89,
      516,   89,  507,   89,   89,   89,  837,   89,   50,   89,
       89,  508,  509,   89,   89,   51,  514,   50,   89,   50,
       89,  522,  506,  837,   89,   50,   89,   89,   89,  837,
       89,  507,   89,   89,   50,  515,   50,  519,  837,   89,
      508,  509,   50,   89,   50,  514,  520,   89,   50,  521,

      522,   50,   50,   51,  524,   50,   89,   50,   51,   50,
       50,   51,   50,  531,  515,  837,  519,  529,   50,  837,
      837,  525,  523,  530,   50,  520,  526,   50,  521,   50,
       51,  527,  528,  524,  534,   50,   50,   50,  532,   51,
      535,   51,  531,  533,   50,   50,  529,   51,   50,  536,
      525,  523,  530,   50,  543,  526,   51,  837,   51,  539,
      527,  528,  538,  534,   51,  537,   51,  532,   50,  535,
       51,  545,  533,   51,   51,  837,  541,   51,  536,   51,
       50,   51,   51,  543,   51,  544,  542,   50,  539,   50,
       51,  538,  540,  551,  537,   50,   51,  837,  837,   51,

      545,   51,  552,   50,   50,  541,  554,   51,   51,   51,
      837,  837,  837,  837,  544,  542,   51,   51,  181,  837,
       51,  540,  553,   50,  547,   51,  548,   50,  556,   89,
      837,  552,  837,   89,  837,  554,  837,  549,  837,  550,
       51,   89,   89,  555,  837,   89,  837,  181,  837,  837,
      837,  553,   51,  547,   89,  548,   89,  556,   89,   51,
       89,   51,   89,  837,  837,  557,  549,   51,  550,   89,
       89,   89,  555,   89,   89,   51,   51,   89,   89,  837,
       89,  837,   89,   89,   89,   89,   89,  837,  837,   89,
       50,   89,  559,   89,  557,   51,  558,   89,   89,   51,

      837,   89,   89,   50,  561,  837,   89,   89,   89,   89,
       89,   89,  837,   89,   89,   89,  560,   89,   89,   89,
       89,  559,   89,   89,   50,  558,   89,   89,   50,  837,
       89,   89,   89,  561,  562,   89,   89,   89,   89,   89,
       89,  563,   89,   89,   89,  560,   89,   89,   89,   89,
      837,   89,   89,   89,  837,   89,   89,   89,  588,   89,
       89,   89,   51,  562,   89,   89,   89,   89,   89,   89,
      563,   89,   89,   89,  837,   51,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,  588,   89,   89,
       89,  564,   89,   89,  565,   89,   51,   89,   50,  837,

       51,   89,   89,   89,  837,   89,   89,   89,   89,  837,
       89,  837,   89,  837,   89,  837,   89,  566,   89,   89,
      564,   89,   89,  565,  837,  567,  568,  837,  837,   89,
       89,   89,   89,   89,   89,  837,   89,  569,  837,  570,
       89,  837,   89,   89,   89,   89,  566,   89,  837,  837,
      837,   89,  837,   89,  567,  568,  571,  837,   89,   89,
       89,  837,   89,   89,   50,  837,  569,  837,  570,   89,
       51,   89,   89,   89,  572,   89,   89,   89,   50,   89,
       89,   89,   89,   50,   50,  571,   50,   89,   89,   89,
       89,   89,  574,   50,  573,   50,  575,  582,   89,  576,

       89,   50,   89,  572,   89,   89,   89,   50,   89,   50,
       89,   89,  580,  577,   50,  578,   89,   89,  593,   89,
       89,  574,   50,  573,   50,  575,  582,   89,  576,   89,
      587,   89,   50,  579,   89,   50,   51,  589,   50,   50,
       89,  580,  577,   50,  578,   50,  581,  593,   50,  583,
       51,   50,   50,   50,  584,   51,   51,  837,   51,  587,
      592,  585,  579,  590,  598,   51,  589,   51,   50,  591,
      586,   50,  597,   51,   50,  581,  594,  595,  583,   51,
       50,   51,   50,  584,  837,   50,   51,  596,   50,  592,
      585,   50,  590,  598,   51,   50,   51,   50,  591,  586,

      600,  597,  601,  599,   51,  594,  595,   51,   50,  607,
       51,   51,   50,  602,   50,   51,  596,   51,  603,   50,
       51,  837,   89,   51,   51,   51,   89,  604,   50,  600,
      605,  601,  599,   50,   50,   89,  837,  606,  607,  837,
       51,   50,  602,   51,   50,  612,   51,  603,  608,   89,
      628,   89,   51,  837,   51,   89,  604,   51,   89,  605,
       51,  610,  837,   51,   89,   50,  606,   51,  611,   51,
      837,   50,  837,   50,  612,  613,  837,  608,   89,   89,
       51,  614,  837,  837,   51,   89,   51,   89,   89,   89,
      610,   51,  837,   89,   89,  625,  837,  611,  616,   89,

       51,  837,   89,   89,  613,   51,   51,   89,   89,  837,
      614,   89,   89,   51,   89,  837,   51,   89,   89,  837,
       89,  615,   89,   89,  625,   89,   89,  616,   89,   89,
       89,   89,   89,   89,   89,  837,   89,   51,  837,   89,
       89,   89,   89,   51,   89,   51,  837,   50,   89,   89,
      615,  837,   89,  837,   89,   89,   89,   89,   89,   89,
      623,  837,   89,   89,  624,   89,   89,  617,   89,   50,
       89,   89,  837,   89,   50,  837,  618,   89,   89,   89,
       89,   89,   89,   50,   89,   89,   89,  620,   89,  619,
       50,   89,   89,   89,   89,   89,  617,   50,  621,   89,

       50,   89,   89,  630,  626,  618,   89,   89,   89,   89,
       89,   89,   50,   89,   89,   89,  620,   89,  619,   51,
       89,   89,   89,   89,  627,  622,   50,  621,   50,  634,
       89,   89,  630,  626,   50,   89,   51,  632,   50,   89,
       50,   51,   50,   89,   89,   50,   51,  633,  631,   50,
      629,   50,   89,  627,  622,   51,  635,   50,  634,   50,
       50,  837,   51,  636,  837,  638,  632,   50,  644,   51,
      643,   50,   51,  640,   50,   50,  633,  631,   50,  629,
      639,   50,   50,  837,   51,  635,  641,  837,   50,  837,
       50,  637,  636,  837,  638,  642,  649,  644,   51,  643,

       51,   50,  640,   50,  647,  648,   51,  645,  646,  639,
       51,   50,   51,  837,   51,  641,  837,   51,  837,  650,
      637,   51,  652,   51,  642,  649,   50,  837,   50,   51,
      837,   51,   51,  647,  648,  661,  645,  646,  623,   51,
      660,  837,  624,   51,  837,   89,   51,   51,  650,   89,
       51,  652,   89,   51,   51,   89,   89,   89,   89,   89,
       51,   89,  659,  653,  661,   89,  837,   89,   89,  660,
       89,   50,   50,   51,   89,   51,   89,  665,   89,   50,
      837,   89,  837,   51,   89,   89,   89,   89,   89,   89,
       89,   89,  653,   89,   89,   89,   89,   89,   51,   89,

       51,   50,   89,  663,   89,   89,  655,  654,   89,  837,
       89,   50,   89,  667,   51,   50,   50,  662,   89,   89,
       89,   89,   89,   50,   89,   89,   50,   50,  656,   89,
       50,   89,  663,   89,  837,  655,  654,   89,   89,   89,
      666,   89,  667,   51,   51,  657,  662,   50,   89,  837,
       89,   51,  664,  669,   89,  668,   50,  656,   89,   50,
      670,   50,   50,   50,   50,  671,   50,   89,   50,  666,
       50,  837,   50,   51,  657,  837,  672,  675,  837,  673,
      837,  664,  674,   51,  668,   50,  837,   51,   51,  670,
      684,  676,  677,   50,  671,   51,  680,  678,   51,   51,

      837,  679,   51,  837,  837,  672,  675,  837,  673,  837,
       89,  674,  681,   50,   89,  837,  837,  837,  837,   51,
      676,  677,  837,   89,  682,  680,  678,  837,   51,  837,
      679,   51,   50,   51,   51,   51,   51,   50,   51,   89,
       51,  681,   51,   89,   51,   89,   89,   89,  837,   89,
       89,   89,   89,  682,  683,   50,   50,   51,   89,   89,
       89,   50,  659,   50,   89,   51,   50,  687,   89,   50,
      688,  686,  690,   50,   89,   89,   89,   89,   89,   89,
       89,  689,  691,  683,   50,   51,   50,   89,   89,   89,
       50,   50,   50,   89,  693,   50,  687,   89,   50,  688,

      686,  690,  837,  692,   51,   50,   89,  694,  695,   51,
      689,  691,  837,   50,  697,  837,   50,   50,  699,  698,
      696,  700,   50,  693,   50,   50,  837,   51,   51,   50,
      704,  710,  692,   51,   50,   51,  694,  695,   51,  701,
       89,   51,   89,  697,   89,   51,   89,  699,  698,  696,
      700,  702,  703,   89,   50,   89,   51,   50,   51,   50,
       50,  707,   51,   51,   51,   50,   50,   51,  701,   89,
       51,   89,  837,   89,   50,   89,   50,   51,  708,  709,
      702,  703,   89,  711,   89,   51,   50,  712,   51,   51,
      707,   50,  716,   50,   51,   50,   51,   51,  713,  714,

       50,   51,   50,   50,  837,   50,   51,  708,  709,  722,
       50,  717,  711,   50,   50,   50,  712,   50,  837,  727,
       50,  715,   50,  719,  720,   50,   51,  713,  714,   51,
      718,   51,   51,  721,   50,  723,   50,   51,   51,  724,
      717,  725,  729,  837,  730,  837,   51,  728,   51,  726,
      715,   50,  719,  720,  736,   50,   50,   50,   51,  718,
       50,   50,  721,   51,  723,   51,   50,   51,  724,  735,
      725,  729,   51,  730,   51,   51,  728,   51,  726,   50,
      733,   50,   51,  736,  737,   51,   51,   51,  731,   51,
      732,   50,   51,  739,   51,  734,   50,   51,  735,   50,

       50,   50,   50,   50,   50,  738,   51,  745,   51,  733,
       50,   50,  837,  737,  837,  740,   50,  731,  743,  732,
       50,  837,  739,   51,  734,  742,   50,   51,   51,   51,
      741,  746,   51,   51,  738,  744,  747,   50,   51,   50,
      751,  748,   50,   50,  740,   50,   50,  743,  837,  757,
      837,   51,  837,   51,  742,  749,  753,  758,   50,  741,
      746,   50,  750,   51,  744,  747,  754,   50,   51,  751,
      748,   51,   51,   51,   51,   51,   51,  760,  752,  759,
      837,   50,   51,   51,  749,  753,  758,   50,   51,  837,
       50,  750,   51,   50,  755,  754,   50,   50,   51,  761,

      756,   50,   50,   50,   50,   50,  760,  752,  759,   51,
       50,   51,   50,  763,   51,   51,  762,   51,   51,  764,
      765,  766,   50,  755,   50,  767,  769,   50,  761,  756,
       51,  768,  770,   51,   50,  773,  837,  778,  771,   51,
       50,   50,  763,  775,  837,  762,  837,   50,  764,  765,
      766,   50,  772,   51,  767,  769,   50,  776,  774,   51,
      768,  770,   51,  780,  773,   51,  778,  771,   51,   51,
       50,  779,  775,   51,   51,   51,   51,   51,   50,  777,
       50,  772,   51,   50,   51,  783,  776,  774,  781,   50,
       50,   50,  780,   50,   51,   50,   51,   50,  782,   51,

      779,   50,   50,   50,   50,   50,   51,  785,  777,  788,
      784,   50,   51,   51,  783,  787,  790,  781,  786,   51,
       50,   50,  793,   51,  796,  789,   50,  782,   51,  837,
      791,  794,  837,   50,   50,  792,  785,   50,  788,  784,
      837,  837,   51,  837,  787,  790,   50,  786,   50,  837,
       51,  793,   51,  796,  789,   51,  795,   50,  800,  791,
      794,   51,   51,   51,  792,   51,  799,   51,  797,   51,
       50,   50,  798,   51,   51,   51,   51,   51,   50,   50,
       50,  802,  801,   51,   50,  795,   50,  800,   50,   50,
      803,   50,   51,   51,  804,  799,   50,  797,   51,  837,

       50,  798,  805,  806,   50,   51,   51,   50,   50,   51,
      802,  801,  810,   50,   50,  808,  811,  807,   51,  803,
       51,   50,   50,  804,  809,   50,  812,   50,  815,   51,
      814,  805,  806,  813,   50,  817,  818,  816,  822,   50,
       50,  810,   51,   51,  808,  811,  807,   50,  821,  819,
       51,   51,   51,  809,  820,  812,   51,  815,   51,  814,
       51,   51,  813,   51,  817,  818,  816,  822,   51,  823,
       50,  824,   51,   50,  825,   50,   51,  821,  819,   51,
       51,   50,   50,  820,   50,   51,   51,   50,   50,   50,
       50,   50,   50,   51,   51,   50,   50,   51,  823,   51,

      824,   50,  828,  825,  827,  826,   51,  837,  837,  837,
      829,   51,   51,  837,  830,  837,  837,  831,  837,   51,
      834,  832,  837,  833,  837,  837,  835,  837,  837,  836,
      837,  828,  837,  827,  826,  837,  837,  837,  837,  829,
      837,  837,   51,  830,  837,   51,  831,   51,  837,  834,
      832,  837,  833,   51,   51,  835,   51,  837,  836,   51,
       51,   51,   51,   51,   51,  837,  837,   51,   51,  837,
      837,  837,  837,   51,   49,  837,   49,   49,   50,  837,
       50,   60,  837,   60,   60,   85,  837,   85,   85,   51,
      837,  837,   51,   95,  837,   95,   95,  181,  837,  181,

      181,  658,  837,  658,  658,  659,  837,  659,  659,    3,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837

    } ;

static const flex_int16_t yy_chk[4992] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    8,    7,    7,    5,    7,   10,   11,
       12,   13,   14,   18,  685,   18,    8,   14,   14,   11,

       61,   14,   61,   28,   27,   20,   21,   28,   27,  684,
      659,  137,   27,   28,   22,   23,   28,  181,   27,   21,
       21,   27,  182,   59,   59,  182,   44,   59,   23,   62,
        3,    0,   28,   27,   45,    0,   28,   27,   46,   49,
       52,   27,   28,   55,   52,   28,  181,   27,    0,    0,
       27,  182,    0,    4,  182,    8,    0,    0,    5,    7,
       10,   11,   12,   13,   14,   15,   15,   82,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   20,   21,   15,
       15,   15,   15,   15,   15,   15,   22,   23,   29,   30,
       31,   32,   29,   30,   31,   32,   34,   29,   44,   30,

       34,   29,   30,   31,   32,   29,   45,   29,  287,   34,
       46,   49,   15,   15,   83,   55,   52,   29,   30,   31,
       32,   29,   30,   31,   32,   34,   29,    0,   30,   34,
       29,   30,   31,   32,   29,    0,   29,  287,   34,   82,
        0,   15,   15,   76,   15,   15,   16,   16,   84,   16,
       16,   16,   16,   16,   16,   16,   16,   54,   54,    0,
       54,   16,   16,   16,   16,   16,   16,   33,   35,   38,
       37,   33,   35,   38,   37,   33,   33,   37,   35,   76,
       33,   35,   38,   37,    0,   38,   83,   88,   88,  288,
      476,    0,  288,   16,   16,  142,   33,   35,   38,   37,

       33,   35,   38,   37,   33,   33,   37,   35,   76,   33,
       35,   38,   37,  142,   38,   76,   88,   88,  288,  476,
       84,  288,   16,   16,   57,   16,   16,   19,   19,   57,
       57,   56,   54,   57,    0,    0,   87,  651,    0,    0,
        0,   42,  142,   87,   19,   42,   19,   19,   19,   19,
       19,   19,   19,    0,   42,   56,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   87,  651,  142,   19,  238,
       42,  241,   87,   19,   42,   19,   19,   19,   19,   19,
       19,   19,    0,   42,   56,   19,   19,   19,   19,   19,
       19,   19,   19,   19,    0,    0,   57,   19,  160,    0,

       19,   24,   24,   56,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   39,   41,   39,   24,   24,   41,   39,  183,
       40,   89,   41,  160,   40,   89,   41,   39,   40,   39,
       24,  238,   40,  241,   89,    0,  183,   40,   24,   24,
       24,   39,   41,   39,   24,   24,   41,   39,  183,   40,
       89,   41,  160,   40,   89,   41,   39,   40,   39,   24,
      160,   40,    0,   89,    0,  183,   40,   24,   24,   25,
       25,    0,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       26,   58,   26,   63,   26,   68,    0,    0,   58,   26,
       58,   26,  136,   26,   26,   26,    0,    0,   43,    0,
        0,  136,   43,  609,    0,   43,   43,   63,    0,   26,
      609,   26,   68,   26,    0,   43,    0,    0,   26,    0,

       26,   68,   26,   26,   26,   36,  140,   43,  145,   36,
       36,   43,  609,   36,   43,   43,   63,    0,   36,  609,
       36,   68,   36,  141,   43,   71,   36,    0,    0,  140,
       68,    0,    0,   58,   36,   63,    0,   68,   36,   36,
        0,  140,   36,    0,  136,    0,    0,   36,  145,   36,
      141,   36,   65,  242,   71,   36,   48,   48,  140,   48,
       48,   48,   48,   48,   48,   48,   48,   64,   67,   48,
      140,   48,   48,   48,   48,   48,   48,  145,  140,  141,
      145,   74,   65,   71,   64,   64,   64,    0,   65,   67,
       69,   70,   66,  236,    0,  141,    0,   71,   74,   73,

       67,   64,  236,   48,   48,  388,  388,   67,   66,    0,
        0,   65,   66,   64,   64,   64,   66,   65,   67,   73,
       69,   70,   66,    0,   65,  242,   70,   74,   66,   67,
       64,    0,   48,   48,  388,  388,   67,   66,   77,   64,
       67,   66,    0,    0,   75,   66,  184,    0,   73,   69,
       70,   66,   72,   74,   77,   70,    0,   66,   77,  149,
       75,   80,   69,   70,   66,  236,  184,  138,   72,   79,
      143,   73,   72,  237,   75,  184,   72,   75,   81,  135,
        0,  139,   72,   77,   75,   79,    0,   77,   78,   75,
       80,    0,  149,   79,    0,  184,  138,   72,   81,  143,

      237,   72,    0,   75,    0,   72,   75,  135,   78,   79,
       77,   72,    0,   75,   79,  139,   75,    0,   78,   80,
       78,  149,   79,   78,   72,  138,  286,   81,  143,  237,
       90,  149,  269,   80,   90,  166,  135,   78,   79,  138,
        0,   79,  143,   90,  139,  237,  286,   78,    0,   78,
       81,  135,   78,  139,    0,  286,    0,  144,  147,   90,
       78,   85,   85,   90,   85,   85,   85,   85,   85,   85,
       85,   85,   90,  166,   85,  286,   85,   85,   85,   85,
       85,   85,   91,   91,   92,   93,    0,   91,   92,   93,
       96,  144,  147,    0,   96,   92,   91,   92,   93,   93,

        0,  245,  166,   96,  269,   96,    0,  166,   85,   85,
        0,   91,   91,   92,   93,   94,   91,   92,   93,   96,
      144,  147,    0,   96,   92,   91,   92,   93,   93,  144,
      147,    0,   96,    0,   96,  245,    0,   85,   85,   94,
       85,   86,   86,   94,   86,   86,   86,   86,   86,   86,
       86,   86,   94,    0,   86,    0,   86,   86,   86,   86,
       86,   86,   97,   98,  245,  102,   97,   98,   94,  102,
       99,   97,   94,  245,   99,   97,   98,    0,  102,  102,
        0,   94,   86,   99,  163,    0,   99,    0,   86,   86,
        0,   97,   98,    0,  102,   97,   98,    0,  102,   99,

       97,    0,    0,   99,   97,   98,  163,  102,  102,    0,
        0,   86,   99,    0,    0,   99,    0,   86,   86,    0,
       86,   95,   95,    0,   95,   95,   95,   95,   95,   95,
       95,   95,    0,    0,   95,  163,   95,   95,   95,   95,
       95,   95,  100,    0,  103,  150,  100,  101,  103,  101,
      101,  100,  103,  101,    0,  100,  163,  103,    0,  103,
      389,  389,  101,  101,    0,  148,  150,  252,   95,   95,
      104,  100,    0,  103,  104,  100,  101,  103,  101,  101,
      100,  103,  101,  104,  100,  104,  103,  252,  103,  389,
      389,  101,  101,  148,    0,  150,  105,   95,   95,  104,

      105,  106,  107,  104,  105,  106,  107,  108,    0,  106,
        0,  108,  104,  105,  104,  107,  252,  150,  106,  109,
      108,    0,  148,  109,    0,  105,  109,    0,    0,  105,
      106,  107,  109,  105,  106,  107,  108,  148,  106,  252,
      108,  152,  105,    0,  107,  151,  110,  106,  109,  108,
      110,  154,  109,    0,  111,  109,  111,  110,  112,  110,
      111,  109,  112,  113,    0,  152,  112,  113,    0,  111,
      111,  112,    0,    0,    0,  110,  113,    0,    0,  110,
      154,  151,  113,  111,    0,  111,  110,  112,  110,  111,
        0,  112,  113,  114,  152,  112,  113,  114,  111,  111,

      112,  115,    0,  115,    0,  113,  114,  115,  114,  154,
      151,  113,    0,  152,  116,  116,  115,  151,  116,  255,
      117,    0,  114,  154,  117,  118,  114,  116,    0,  118,
      115,    0,  115,  117,  155,  114,  115,  114,  118,  255,
      118,    0,  119,  116,  116,  115,  119,  116,  120,  117,
      155,    0,  120,  117,  118,  119,  116,    0,  118,  554,
      123,  120,  117,  157,  123,  554,  121,  118,  255,  118,
      121,  119,  122,  123,  121,  119,  122,  120,  276,  155,
      121,  120,  122,  121,  119,  122,  159,    0,  554,  123,
      120,  255,  157,  123,  554,  121,  124,    0,    0,  121,

      124,  122,  123,  121,  124,  122,  155,    0,  276,  121,
      159,  122,  121,  124,  122,  125,    0,    0,    0,  125,
        0,  157,  125,  126,    0,  124,  161,  126,  125,  124,
      125,  126,  127,  124,  128,  157,  127,  276,  128,  159,
      126,    0,  124,    0,  125,  127,  127,  128,  125,  131,
      276,  125,  126,  131,  153,  161,  126,  125,  159,  125,
      126,  127,  131,  128,  156,  127,  129,  128,    0,  126,
      129,  165,    0,    0,  127,  127,  128,  129,  131,  129,
      130,  130,  131,  132,  161,  130,  162,  132,  133,  134,
      153,  131,  133,  134,  130,  129,  132,    0,  161,  129,

      156,  133,  134,  133,  165,  170,  129,  146,  129,  130,
      130,  158,  132,  168,  130,  162,  132,  133,  134,  153,
      164,  133,  134,  130,  146,  132,  153,  167,  171,  156,
      133,  134,  133,  165,  170,  158,  156,  168,  158,  169,
      146,  146,  173,  165,  162,  164,  259,  167,  174,  180,
      172,  167,  259,  146,  175,  169,  176,  178,  162,    0,
      171,    0,  179,  170,  158,  180,  168,  158,  172,  146,
      146,  239,    0,  177,  164,  173,  167,  170,  176,  146,
      167,  174,    0,  158,  169,  168,  179,  175,  178,  171,
      176,    0,  164,    0,  180,  239,    0,  172,    0,  167,

      171,  177,    0,    0,  173,    0,    0,  176,    0,  186,
      174,  169,    0,    0,  173,  179,  175,  178,  259,  176,
      174,  180,  172,  185,  239,    0,  175,  185,  176,  178,
      177,  187,  185,  186,  179,  187,  185,  186,  187,    0,
        0,    0,    0,  239,  187,  177,  186,  189,    0,  249,
      188,  189,  185,    0,  188,    0,  185,    0,    0,    0,
      187,  185,  186,  188,  187,  185,  186,  187,  190,    0,
      262,  189,  190,  187,  249,  186,  192,  191,  191,  188,
      192,  190,  191,  188,  192,  189,  190,    0,    0,  244,
        0,  191,  188,  192,    0,    0,    0,  190,    0,  262,

      189,  190,  257,  249,  193,  192,  191,  191,  193,  192,
      190,  191,  194,  192,  189,  190,  194,  193,  193,    0,
      191,  249,  192,  189,  244,  194,  195,  194,  262,  257,
      195,  196,    0,  193,  197,  196,  197,  193,  274,  195,
      197,  194,  262,    0,  196,  194,  193,  193,    0,  197,
        0,    0,    0,  244,  194,  195,  194,  274,  257,  195,
      196,  244,  198,  197,  196,  197,  198,  199,  195,  197,
      198,  199,  200,  196,  257,  199,  200,  198,  197,  198,
      260,    0,    0,  200,  199,  200,  274,  202,    0,  201,
      202,  198,  201,  201,  202,  198,  199,    0,    0,  198,

      199,  200,  201,  202,  199,  200,  198,    0,  198,    0,
      274,  240,  200,  199,  200,  260,  202,    0,  201,  202,
      203,  201,  201,  202,  203,  204,  205,  203,    0,  204,
      205,  201,  202,  203,  205,  240,  280,  206,  204,  204,
      204,  206,    0,  205,  260,  250,    0,  208,  206,  203,
      206,  208,  260,  203,  204,  205,  203,    0,  204,  205,
      208,  250,  203,  205,  240,  235,  206,  204,  204,  204,
      206,  207,  205,    0,    0,  207,  208,  206,  207,  206,
      208,  209,  210,  240,  207,  209,  210,    0,    0,  208,
      250,  346,  209,  212,  209,  210,  235,  212,  349,  214,

      207,    0,    0,  214,  207,  211,  212,  207,  280,  211,
      209,  210,  214,  207,  209,  210,  211,  250,  211,  258,
      211,  209,  212,  209,  210,  235,  212,  213,  214,  215,
        0,  213,  214,  215,  211,  212,    0,  235,  211,    0,
      213,  214,  215,  213,  216,  211,  217,  211,  216,  211,
      217,    0,  258,    0,  247,  217,  213,  216,  215,  217,
      213,  218,  215,  346,    0,  218,    0,    0,  358,  213,
      349,  215,  213,  216,  218,  217,  218,  216,  247,  217,
        0,  258,  219,  219,  217,  251,  216,  219,  217,  220,
      218,  258,  221,  220,  218,  221,  219,    0,  220,  221,

      222,  251,  220,  218,  222,  218,    0,  247,  221,    0,
      223,  219,  219,  222,  223,  222,  219,  223,  220,    0,
        0,  221,  220,  223,  221,  219,  247,  220,  221,  222,
      251,  220,  224,  222,  225,    0,  224,  221,  225,  223,
      358,    0,  222,  223,  222,  224,  223,  225,    0,  226,
        0,    0,  223,  226,  229,  229,  230,  251,    0,  229,
      230,  224,  226,  225,  226,  224,  227,  225,  229,  230,
      227,    0,  227,  228,  224,    0,  225,  228,  226,  227,
        0,  228,  226,  229,  229,  230,  228,  231,  229,  230,
      231,  226,  246,  226,  231,  227,  232,  229,  230,  227,

      232,  227,  228,  231,    0,  233,  228,  233,  227,  232,
      228,  233,  248,  234,  232,  228,  231,  234,  243,  231,
      233,  256,  234,  231,  254,  232,  234,    0,  246,  232,
      248,  253,  231,  264,  233,    0,  233,  243,  232,  256,
      233,  261,  234,  232,  265,  277,  234,  253,  278,  233,
        0,  234,  243,  267,  263,  234,  266,  246,  254,  248,
      271,  361,  268,  272,  246,  261,  243,  270,  256,  264,
      263,  273,  266,  267,    0,  275,  253,  263,  268,  265,
      277,  243,    0,  278,  248,  270,  270,  254,    0,  271,
      243,    0,  272,  256,  261,  279,  254,  281,  264,  263,

      273,  266,  267,  253,  282,  264,  263,  268,  265,  277,
        0,  275,  278,  261,  270,  270,  265,  277,  271,  279,
      278,  272,  283,  281,  282,  267,  263,  284,  266,  273,
      285,  293,  271,  361,  268,  272,  289,  289,    0,  270,
      275,  289,  283,  273,    0,    0,  283,  275,  279,  350,
      289,  380,  281,  282,  290,  294,    0,    0,  290,  353,
      293,    0,    0,  285,  284,  289,  289,  279,  291,  281,
      289,  283,  291,    0,    0,  283,  282,  353,  290,  289,
        0,  291,  292,  295,  292,  350,  292,  295,  291,  293,
      294,    0,  285,  284,  283,  292,  295,  291,    0,  284,

        0,  291,  285,  293,  348,  296,  353,  290,    0,  296,
      291,  292,  295,  292,  350,  292,  295,  291,  296,  294,
        0,  350,  297,  380,  292,  295,  297,  294,  297,  298,
      290,  353,  299,  298,  296,  297,  299,  298,  296,  300,
      301,  348,    0,  300,  301,  299,  298,  296,    0,  301,
      302,  297,  300,  301,  302,  297,    0,  297,  298,    0,
        0,  299,  298,  302,  297,  299,  298,    0,  300,  301,
      348,    0,  300,  301,  299,  298,  348,  303,  301,  302,
      303,  300,  301,  302,  303,  305,    0,  304,    0,  305,
      356,  304,  302,  303,  304,  306,    0,  307,  305,  306,

      304,  307,    0,  306,  308,    0,  303,    0,  308,  303,
      307,  308,  306,  303,  305,    0,  304,  308,  305,  356,
      304,  309,  303,  304,  306,  309,  307,  305,  306,  304,
      307,  311,  306,  308,  309,  311,    0,  308,  310,  307,
      308,  306,  310,  313,  311,  312,  308,  313,  356,  312,
      309,  310,  312,  310,  309,  314,  313,  315,  312,  314,
      311,  315,  356,  309,  311,    0,    0,  310,  314,    0,
      315,  310,  313,  311,  312,  314,  313,  321,  312,  316,
      310,  312,  310,  316,  314,  313,  315,  312,  314,  317,
      315,    0,  316,  317,  318,    0,  319,  314,  318,  315,

      319,  321,  317,    0,  314,  321,  320,  318,  316,  319,
      320,  319,  316,  322,  321,  347,  320,  322,  317,  320,
      323,  316,  317,  318,  323,  319,  322,  318,  324,  319,
      321,  317,  324,  323,  321,  320,  318,  347,  319,  320,
      319,  324,  322,  321,  339,  320,  322,    0,  320,  323,
      325,  369,  447,  323,  325,  322,    0,  324,    0,    0,
      326,  324,  323,  325,  326,  325,  347,  326,  327,  369,
      324,  328,  327,  326,  339,  328,  329,    0,  329,  325,
        0,  327,  329,  325,  328,  340,  330,  347,    0,  326,
      330,  329,  325,  326,  325,    0,  326,  327,  369,  330,

      328,  327,  326,  339,  328,  329,    0,  329,  331,  340,
      327,  329,  331,  328,  332,  330,  339,    0,  332,  330,
      329,  331,  331,  369,  447,    0,  333,  332,  330,  332,
      333,  334,  342,    0,  341,  334,  335,  331,  340,  333,
      335,  331,  345,  332,  334,  334,  335,  332,  336,  335,
      331,  331,  336,  344,  341,  333,  332,  340,  332,  333,
      334,  336,  342,  337,  334,  335,  337,  337,  333,  335,
      343,  354,  345,  334,  334,  335,  337,  336,  335,  351,
      338,  336,  359,  341,  338,  352,  355,  360,  344,  357,
      336,  342,  337,  338,  343,  337,  337,  362,  354,  363,

      364,  345,  366,  351,  342,  337,  341,  360,  365,  338,
      367,  368,    0,  338,  345,  372,  359,  344,  371,  370,
      352,  355,  338,  343,  357,  344,  362,  354,  374,    0,
      373,  437,  351,  367,  363,  364,  360,  366,  365,  372,
      376,  437,  343,  354,  375,  359,  368,  370,  371,  352,
      355,  351,  374,  357,  359,  362,  378,  352,  355,  360,
      377,  357,  367,  363,  364,  373,  366,  365,  372,  362,
      376,  363,  364,  381,  366,  368,  370,  371,  379,  375,
      365,  374,  367,  368,  377,  378,  382,  372,  384,  385,
      371,  370,  383,  387,  373,  379,  394,  386,  383,  376,

      374,  391,  373,  437,  381,  438,  392,  395,  375,    0,
      392,  383,  376,  377,  378,  394,  375,  386,  385,  392,
      382,    0,  384,  395,  379,  438,  390,  387,  378,  460,
      390,    0,  377,  381,  390,  392,  468,    0,  391,  392,
      383,    0,  468,  390,  394,  381,  386,  385,  392,  382,
      379,  384,  395,  393,  438,  390,  387,  393,  382,  390,
      384,  385,  393,  390,  383,  387,  393,  391,  394,  386,
      396,  397,  390,  391,  396,  397,  430,  438,    0,  395,
      471,  398,  393,  396,  397,  398,  393,    0,  398,  399,
        0,  393,  401,  399,  398,  393,  401,    0,  399,  396,

      397,  460,  399,  396,  397,  401,    0,  400,  468,  430,
      398,  400,  396,  397,  398,  400,  402,  398,  399,  432,
      402,  401,  399,  398,  400,  401,  403,  399,  405,  402,
      403,  399,  405,  403,  401,    0,  400,  405,  430,  403,
      400,  405,    0,  404,  400,  402,    0,  404,  430,  402,
      406,  404,  471,  400,  406,  403,  432,  405,  402,  403,
      404,  405,  403,  406,    0,  406,  405,    0,  403,  407,
      405,  408,  404,  407,  409,  408,  404,    0,  409,  406,
      404,    0,  407,  406,  408,  432,  410,  409,  409,  404,
      410,  432,  406,  410,  406,    0,  474,  411,  407,  410,

      408,  411,  407,  409,  408,  480,    0,  409,  431,    0,
      411,  407,  413,  408,  413,  410,  409,  409,  413,  410,
      414,  412,  410,    0,  414,  412,  411,  413,  410,  412,
      411,  415,  416,  414,    0,  415,  416,  431,  412,  411,
      415,  413,    0,  413,  415,    0,    0,  413,    0,  414,
      412,    0,  416,  414,  412,  417,  413,  417,  412,  418,
      415,  417,  414,  418,  415,  433,  431,  412,  474,  415,
      417,  420,  418,  415,  419,    0,    0,  480,  419,    0,
      431,  416,    0,    0,  417,  420,  417,  419,  418,  420,
      417,  421,  418,  436,  433,  421,  422,    0,  420,  417,

      422,  418,    0,  419,  421,    0,  421,  419,  416,  422,
        0,  424,    0,  423,  420,  424,  419,  423,  420,  424,
      421,  436,    0,  433,  421,  422,  423,  420,  424,  422,
      425,  434,    0,  421,  425,  421,  442,  433,  422,  513,
      424,  426,  423,  425,  424,  426,  423,  427,  424,  428,
      436,  427,  426,  428,  426,  423,    0,  424,  439,  425,
      427,  427,  428,  425,  429,  436,  434,  440,  429,  435,
      426,  442,  425,    0,  426,  441,  427,  429,  428,    0,
      427,  426,  428,  426,  444,  435,  445,  439,    0,  427,
      427,  428,  448,  429,  452,  434,  440,  429,  443,  441,

      442,  450,  446,  434,  444,  456,  429,  451,  442,  454,
      455,  513,  449,  452,  435,    0,  439,  450,  453,    0,
        0,  445,  443,  451,  461,  440,  446,  517,  441,  457,
      439,  448,  449,  444,  455,  465,  458,  467,  453,  440,
      456,  435,  452,  454,  459,  466,  450,  441,  463,  457,
      445,  443,  451,  464,  465,  446,  444,    0,  445,  461,
      448,  449,  459,  455,  448,  458,  452,  453,  462,  456,
      443,  467,  454,  450,  446,    0,  463,  456,  457,  451,
      472,  454,  455,  465,  449,  466,  464,  470,  461,  473,
      453,  459,  462,  470,  458,  481,  461,    0,    0,  517,

      467,  457,  472,  469,  520,  463,  475,  465,  458,  467,
        0,    0,    0,    0,  466,  464,  459,  466,  475,    0,
      463,  462,  473,  478,  469,  464,  469,  522,  481,  477,
        0,  472,    0,  477,    0,  475,    0,  469,    0,  469,
      462,  479,  477,  478,    0,  479,    0,  475,    0,    0,
        0,  473,  472,  469,  479,  469,  482,  481,  477,  470,
      482,  473,  477,    0,    0,  482,  469,  481,  469,  482,
      479,  477,  478,  483,  479,  469,  520,  483,  485,    0,
      484,    0,  485,  479,  484,  482,  483,    0,    0,  482,
      528,  485,  485,  484,  482,  478,  484,  486,  482,  522,

        0,  486,  483,  531,  488,    0,  483,  485,  488,  484,
      486,  485,    0,  484,  489,  483,  487,  488,  489,  487,
      485,  485,  484,  487,  525,  484,  486,  489,  533,    0,
      486,  490,  487,  488,  489,  490,  492,  488,  491,  486,
      492,  491,  491,  489,  490,  487,  488,  489,  487,  492,
        0,  491,  487,  493,    0,  494,  489,  493,  525,  494,
      490,  487,  528,  489,  490,  492,  493,  491,  494,  492,
      491,  491,  495,  490,    0,  531,  495,  496,  492,  497,
      491,  496,  493,  497,  494,  495,  493,  525,  494,  498,
      496,  496,  497,  498,  497,  493,  525,  494,  500,    0,

      533,  495,  498,  499,    0,  495,  496,  499,  497,    0,
      496,    0,  497,    0,  495,    0,  499,  499,  498,  496,
      496,  497,  498,  497,    0,  500,  501,    0,    0,  502,
      501,  498,  499,  502,  501,    0,  499,  502,    0,  503,
      503,    0,  502,  501,  503,  499,  499,  504,    0,    0,
        0,  504,    0,  503,  500,  501,  503,    0,  502,  501,
      504,    0,  502,  501,  510,    0,  502,    0,  503,  503,
      500,  502,  501,  503,  505,  506,  504,  505,  518,  506,
      504,  505,  503,  515,  532,  503,  539,  507,  506,  504,
      505,  507,  508,  511,  507,  512,  508,  518,  509,  510,

      507,  524,  509,  505,  506,  508,  505,  526,  506,  514,
      505,  509,  515,  511,  519,  512,  507,  506,  532,  505,
      507,  508,  516,  507,  521,  508,  518,  509,  510,  507,
      524,  509,  527,  514,  508,  523,  510,  526,  530,  534,
      509,  515,  511,  535,  512,  529,  516,  532,  538,  519,
      518,  541,  536,  537,  521,  515,  532,    0,  539,  524,
      530,  521,  514,  527,  538,  511,  526,  512,  543,  529,
      523,  544,  537,  524,  545,  516,  534,  535,  519,  526,
      542,  514,  540,  521,    0,  551,  519,  536,  547,  530,
      521,  546,  527,  538,  516,  549,  521,  548,  529,  523,

      542,  537,  543,  540,  527,  534,  535,  523,  550,  551,
      530,  534,  552,  546,  553,  535,  536,  529,  547,  577,
      538,    0,  557,  541,  536,  537,  557,  548,  555,  542,
      549,  543,  540,  556,  578,  557,    0,  550,  551,    0,
      543,  588,  546,  544,  582,  558,  545,  547,  553,  558,
      582,  557,  542,    0,  540,  557,  548,  551,  558,  549,
      547,  555,    0,  546,  557,  579,  550,  549,  556,  548,
        0,  567,    0,  593,  558,  559,    0,  553,  558,  559,
      550,  560,    0,    0,  552,  560,  553,  558,  559,  561,
      555,  577,    0,  561,  560,  579,    0,  556,  567,  562,

      555,    0,  561,  562,  559,  556,  578,  563,  559,    0,
      560,  563,  562,  588,  560,    0,  582,  559,  561,    0,
      563,  564,  561,  560,  579,  564,  565,  567,  562,  566,
      565,  561,  562,  566,  564,    0,  563,  579,    0,  565,
      563,  562,  566,  567,  569,  593,    0,  595,  569,  563,
      564,    0,  568,    0,  564,  565,  568,  569,  566,  565,
      576,    0,  566,  564,  576,  568,  570,  568,  565,  580,
      570,  566,    0,  569,  584,    0,  570,  569,  571,  570,
      572,  568,  571,  581,  572,  568,  569,  572,  574,  571,
      601,  571,  574,  572,  568,  570,  568,  586,  573,  570,

      589,  574,  573,  584,  580,  570,  573,  571,  570,  572,
      575,  571,  587,  572,  575,  573,  572,  574,  571,  595,
      571,  574,  572,  575,  581,  575,  583,  573,  585,  589,
      574,  573,  584,  580,  591,  573,  576,  586,  602,  575,
      590,  580,  600,  575,  573,  594,  584,  587,  585,  597,
      583,  598,  575,  581,  575,  581,  590,  592,  589,  611,
      596,    0,  601,  591,    0,  594,  586,  607,  602,  586,
      600,  599,  589,  597,  603,  604,  587,  585,  616,  583,
      596,  606,  610,    0,  587,  590,  598,    0,  605,    0,
      624,  592,  591,    0,  594,  599,  607,  602,  583,  600,

      585,  626,  597,  608,  605,  606,  591,  603,  604,  596,
      602,  625,  590,    0,  600,  598,    0,  594,    0,  608,
      592,  597,  610,  598,  599,  607,  630,    0,  632,  592,
        0,  611,  596,  605,  606,  626,  603,  604,  623,  607,
      625,    0,  623,  599,    0,  612,  603,  604,  608,  612,
      616,  610,  613,  606,  610,  614,  613,  615,  612,  614,
      605,  615,  624,  617,  626,  613,    0,  617,  614,  625,
      615,  631,  628,  626,  612,  608,  617,  631,  612,  634,
        0,  613,    0,  625,  614,  613,  615,  612,  614,  618,
      615,  619,  617,  618,  613,  619,  617,  614,  630,  615,

      632,  627,  618,  628,  619,  617,  620,  618,  621,    0,
      620,  636,  621,  634,  623,  629,  633,  627,  618,  620,
      619,  621,  618,  637,  619,  622,  635,  639,  621,  622,
      640,  618,  628,  619,    0,  620,  618,  621,  622,  620,
      633,  621,  634,  631,  628,  622,  627,  638,  620,    0,
      621,  634,  629,  638,  622,  635,  641,  621,  622,  642,
      639,  644,  643,  645,  647,  640,  648,  622,  646,  633,
      652,    0,  649,  627,  622,    0,  641,  644,    0,  642,
        0,  629,  643,  636,  635,  650,    0,  629,  633,  639,
      658,  645,  646,  661,  640,  637,  649,  647,  635,  639,

        0,  648,  640,    0,    0,  641,  644,    0,  642,    0,
      653,  643,  650,  667,  653,    0,    0,    0,    0,  638,
      645,  646,    0,  653,  653,  649,  647,    0,  641,    0,
      648,  642,  662,  644,  643,  645,  647,  663,  648,  653,
      646,  650,  652,  653,  649,  654,  655,  656,    0,  654,
      655,  656,  653,  653,  654,  660,  665,  650,  654,  655,
      656,  664,  658,  669,  657,  661,  666,  662,  657,  668,
      663,  660,  665,  670,  654,  655,  656,  657,  654,  655,
      656,  664,  666,  654,  671,  667,  672,  654,  655,  656,
      674,  675,  679,  657,  669,  673,  662,  657,  677,  663,

      660,  665,    0,  668,  662,  676,  657,  670,  671,  663,
      664,  666,    0,  694,  673,    0,  678,  680,  675,  674,
      672,  676,  696,  669,  681,  689,    0,  660,  665,  699,
      681,  689,  668,  664,  686,  669,  670,  671,  666,  677,
      682,  668,  683,  673,  682,  670,  683,  675,  674,  672,
      676,  678,  680,  682,  687,  683,  671,  702,  672,  688,
      691,  686,  674,  675,  679,  690,  693,  673,  677,  682,
      677,  683,    0,  682,  692,  683,  698,  676,  687,  688,
      678,  680,  682,  690,  683,  694,  697,  691,  678,  680,
      686,  695,  697,  701,  696,  700,  681,  689,  692,  693,

      703,  699,  704,  707,    0,  708,  686,  687,  688,  707,
      710,  698,  690,  712,  711,  715,  691,  713,    0,  712,
      709,  695,  714,  701,  703,  718,  687,  692,  693,  702,
      700,  688,  691,  704,  722,  708,  721,  690,  693,  709,
      698,  710,  714,    0,  715,    0,  692,  713,  698,  711,
      695,  719,  701,  703,  722,  723,  717,  716,  697,  700,
      725,  730,  704,  695,  708,  701,  732,  700,  709,  721,
      710,  714,  703,  715,  704,  707,  713,  708,  711,  720,
      719,  724,  710,  722,  723,  712,  711,  715,  716,  713,
      717,  726,  709,  725,  714,  720,  728,  718,  721,  727,

      729,  733,  731,  737,  734,  724,  722,  733,  721,  719,
      740,  742,    0,  723,    0,  726,  735,  716,  729,  717,
      736,    0,  725,  719,  720,  728,  743,  723,  717,  716,
      727,  734,  725,  730,  724,  731,  735,  738,  732,  747,
      740,  736,  739,  746,  726,  741,  744,  729,    0,  746,
        0,  720,    0,  724,  728,  738,  743,  747,  748,  727,
      734,  749,  739,  726,  731,  735,  744,  745,  728,  740,
      736,  727,  729,  733,  731,  737,  734,  749,  741,  748,
        0,  750,  740,  742,  738,  743,  747,  751,  735,    0,
      753,  739,  736,  752,  745,  744,  758,  755,  743,  750,

      745,  762,  754,  760,  757,  756,  749,  741,  748,  738,
      767,  747,  759,  752,  739,  746,  751,  741,  744,  753,
      754,  755,  761,  745,  764,  756,  758,  765,  750,  745,
      748,  757,  759,  749,  769,  762,    0,  767,  760,  745,
      763,  773,  752,  764,    0,  751,    0,  768,  753,  754,
      755,  766,  761,  750,  756,  758,  772,  765,  763,  751,
      757,  759,  753,  769,  762,  752,  767,  760,  758,  755,
      770,  768,  764,  762,  754,  760,  757,  756,  771,  766,
      774,  761,  767,  775,  759,  772,  765,  763,  770,  776,
      779,  777,  769,  778,  761,  781,  764,  780,  771,  765,

      768,  782,  784,  783,  792,  786,  769,  775,  766,  778,
      774,  797,  763,  773,  772,  777,  780,  770,  776,  768,
      801,  785,  783,  766,  786,  779,  820,  771,  772,    0,
      781,  784,    0,  787,  790,  782,  775,  788,  778,  774,
        0,    0,  770,    0,  777,  780,  789,  776,  791,    0,
      771,  783,  774,  786,  779,  775,  785,  793,  790,  781,
      784,  776,  779,  777,  782,  778,  789,  781,  787,  780,
      795,  794,  788,  782,  784,  783,  792,  786,  796,  798,
      800,  793,  791,  797,  799,  785,  804,  790,  803,  802,
      794,  805,  801,  785,  795,  789,  806,  787,  820,    0,

      810,  788,  796,  798,  808,  787,  790,  811,  815,  788,
      793,  791,  803,  809,  807,  800,  804,  799,  789,  794,
      791,  814,  825,  795,  802,  812,  805,  827,  808,  793,
      807,  796,  798,  806,  813,  810,  811,  809,  815,  816,
      818,  803,  795,  794,  800,  804,  799,  817,  814,  812,
      796,  798,  800,  802,  813,  805,  799,  808,  804,  807,
      803,  802,  806,  805,  810,  811,  809,  815,  806,  816,
      821,  817,  810,  822,  818,  819,  808,  814,  812,  811,
      815,  823,  832,  813,  824,  809,  807,  828,  826,  829,
      833,  830,  831,  814,  825,  834,  835,  812,  816,  827,

      817,  836,  822,  818,  821,  819,  813,    0,    0,    0,
      823,  816,  818,    0,  824,    0,    0,  826,    0,  817,
      830,  828,    0,  829,    0,    0,  831,    0,    0,  834,
        0,  822,    0,  821,  819,    0,    0,    0,    0,  823,
        0,    0,  821,  824,    0,  822,  826,  819,    0,  830,
      828,    0,  829,  823,  832,  831,  824,    0,  834,  828,
      826,  829,  833,  830,  831,    0,    0,  834,  835,    0,
        0,    0,    0,  836,  838,    0,  838,  838,  839,    0,
      839,  840,    0,  840,  840,  841,    0,  841,  841,  842,
        0,    0,  842,  843,    0,  843,  843,  844,    0,  844,

      844,  845,    0,  845,  845,  846,    0,  846,  846,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837

    } ;

#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "yacc/lexer.ll"
/*  ***************************************************************************
 * Copyright (C) 2008, IActive Intelligent Solutions S.L. http://www.iactive.es
 * ***************************************************************************/
#line 7 "yacc/lexer.ll"

using namespace std;

#include "constants.hh"
#include <string>
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <ctime>
#include "parser.hh"
#include "MyLexer.hh"
#include "papi.hh"

static bool inComment = false;
static bool inScript = false;
static bool inStr = false;
static string script;
static string buffer;
extern bool AtExpected;
extern bool inDebugContext;
extern int TU_Transform[6];

extern MyLexer * lexer;

extern char * yytext;
extern int yylineno;
extern int yy_flex_debug;

void MyLexer::initErrorTable()
{

    dictionary["LEFTPAR"] = "`('";
    dictionary["RIGHTPAR"] = "`)'";
    dictionary["PDDL_DEFINE"] = "`define'";
    dictionary["CUSTOMIZATION"] = "`:customization'";
    dictionary["TIMEUNIT"] = "`:time-unit'";
    dictionary["TIMESTART"] = "`:time-start'";
    dictionary["TIMEFORMAT"] = "`:time-format'";
    dictionary["TIMEHORIZON"] = "`:time-horizon-limit'";
    dictionary["RELTIMEHORIZON"] = "`:time-horizon-relative'";
    dictionary["THOURS"] = "`:hours'";
    dictionary["TMINUTES"] = "`:minutes'";
    dictionary["TSECONDS"] = "`:seconds'";
    dictionary["TDAYS"] = "`:days'";
    dictionary["TMONTHS"] = "`:months'";
    dictionary["TYEARS"] = "`:years'";
    dictionary["PDDL_DOMAINREF"] = "`:domain'";
    dictionary["PDDL_DOMAIN"] = "`domain'";
    dictionary["PDDL_PROBLEM"] = "`problem'";
    dictionary["PDDL_NAME"] = "identificator";
    dictionary["$end"] = "end of file";
    dictionary["PDDL_REQUIREMENTS"]= "`:requirements'";
    dictionary["PDDL_STRIPS"] = "`:strips'";
    dictionary["PDDL_TYPING"] = "`:typing'";
    dictionary["PDDL_NEGATIVE_PRECONDITIONS"] = "`:negative-preconditions'";
    dictionary["PDDL_DISJUNTIVE_PRECONDITIONS"] = "`:disjuntive-preconditions'";
    dictionary["PDDL_EQUALITY"] = "`:equality'";
    dictionary["PDDL_EXISTENTIAL_PRECONDITIONS"] = "`:existential-preconditions'";
    dictionary["PDDL_UNIVERSAL_PRECONDITIONS"] = "`:universal-preconditions'";
    dictionary["PDDL_QUANTIFIED_PRECONDITIONS"] = "`:quantified-preconditions'";
    dictionary["PDDL_CONDITIONAL_EFFECTS"] = "`:conditional-effects'";
    dictionary["PDDL_FLUENTS"] = "`:fluents'";
    dictionary["PDDL_ADL"] = "`:adl'";
    dictionary["PDDL_DURATIVE_ACTIONS"] = "`:durative-actions'";
    dictionary["PDDL_DERIVED_PREDICATES"] = "`:derived-predicates'";
    dictionary["PDDL_TIMED_INITIAL_LITERALS"] = "`:timed-initial-literals'";
    dictionary["PDDL_TYPES"] = "`types'";
    dictionary["PDDL_EITHER"] = "`either'";
    dictionary["PDDL_HYPHEN"] = "`-'";
    dictionary["PDDL_PREDICATES"] = "`:predicates'";
    dictionary["PDDL_FUNCTIONS"] = "`:functions'";
    dictionary["PDDL_VAR"] = "variable";
    dictionary["PDDL_ACTION"] = "`:action'";
    dictionary["PDDL_NOT"] = "`not'";
    dictionary["PDDL_PARAMETERS"] = "`:parameters'";
    dictionary["PDDL_PRECONDITION"] = ":precondition";
    dictionary["PDDL_IMPLY"] = "`imply'";
    dictionary["PDDL_AND"] = "`and'";
    dictionary["PDDL_OR"] = "`or'";
    dictionary["PDDL_EXISTS"] = "`exists'";
    dictionary["PDDL_FORALL"] = "`forall'";
    dictionary["PDDL_INIT"] = "`:init'";
    dictionary["PLUS"]="`+'";
    dictionary["MINUS"]="`-'";
    dictionary["DIVIDE"]="`/'";
    dictionary["MULTIPLY"]="`*'";
    dictionary["GREATHER"]="`>'";
    dictionary["LESS"]="`<'";
    dictionary["EQUAL"]="`='";
    dictionary["DISTINCT"]="`<>'";
    dictionary["GREATHER_EQUAL"]="`>='";
    dictionary["LESS_EQUAL"]="`<='";
    dictionary["PDDL_NUMBER"] = "number";
    dictionary["PDDL_DNUMBER"] = "number";
    dictionary["PDDL_EFFECT"] = "`:effect'";
    dictionary["PDDL_ASSIGN"] = "`assign'";
    dictionary["PDDL_BIND"] = "`bind'";
    dictionary["PDDL_SCALE_UP"] = "`scale-up'";
    dictionary["PDDL_SCALE_DOWN"] = "`scale-down'";
    dictionary["PDDL_INCREASE"] = "`increase'";
    dictionary["PDDL_DECREASE"] = "`decrease'";
    dictionary["PDDL_WHEN"] = "`when'";
    dictionary["PDDL_GOAL"] = "`:goal'";
    dictionary["PDDL_AT"] = "at";
    dictionary["PDDL_OBJECT"] = "`:objects'";
    dictionary["PDDL_OVERALL"] = "`over all'";
    dictionary["PDDL_DURATIONVAR"] = "`?duration'";
    dictionary["STARTVAR"] = "`?start'";
    dictionary["ENDVAR"] = "`?end'";
    dictionary["PDDL_DERIVED"] = "`:derived'";
    dictionary["PDDL_CONDITION"] = "`:condition'";
    dictionary["PDDL_ATSTART"] = "`at start'";
    dictionary["PDDL_DURATION"] = "`:duration'";
    dictionary["PDDL_DURATIVE_ACTION"] = ":durative-action";
    dictionary["PDDL_ATEND"] = "at end";
    dictionary["PDDL_CONSTANTS"] = ":constants";
    dictionary["HTN_EXPANSION"] = ":htn-expansion";
    dictionary["META_TAGS"] = ":metatags";
    dictionary["META"] = ":meta";
    dictionary["TAG"] = ":tag";
    dictionary["HTN_TASK"] = "`:task'";
    dictionary["HTN_TASKS"] = "`:tasks'";
    dictionary["HTN_ACHIEVE"] = "`:achieve'";
    dictionary["HTN_TEXT"] = "\"<string>\"";
    dictionary["HTN_METHOD"] = "`:method'";
    dictionary["HTN_TASKSGOAL"] = "`:tasks-goal'";
    dictionary["PYTHON_CODE"] = "<scripting code>";
    dictionary["HTN_INLINE"] = ":inline";
    dictionary["HTN_INLINECUT"] = ":!inline";
    dictionary["LEFTBRAC"] = "[";
    dictionary["RIGHTBRAC"] = "]";
    dictionary["EXCLAMATION"] = "!";
    dictionary["RANDOM"] = ":random";
    dictionary["SORTBY"] = ":sortby";
    dictionary["ASC"] = ":asc";
    dictionary["DESC"] = ":desc";
    dictionary["MAINTAIN"] = ":maintain";
    dictionary["PDDL_BETWEEN"] = "between";
    dictionary["POW"] = ":pow";
    dictionary["SQRT"] = ":sqrt";
    dictionary["ABS"] = ":abs";
    dictionary["PPRINT"] = ":print";
    dictionary["DBG_QUIT"] = "`quit'";
    dictionary["DBG_CONTINUE"] = "`continue'";
    dictionary["DBG_HELP"] = "`help'";
    dictionary["DBG_PATH"] = "`<path>'";
    dictionary["DBG_PRINT"] = "`print'";
    dictionary["DBG_DISPLAY"] = "`display'";
    dictionary["DBG_DESCRIBE"] = "`describe'";
    dictionary["DBG_UNDISPLAY"] = "`undisplay'";
    dictionary["DBG_STATE"] = "`state'";
    dictionary["DBG_AGENDA"] = "`agenda'";
    dictionary["DBG_PLAN"] = "`plan'";
    dictionary["DBG_VIEWER"] = "`viewer'";
    dictionary["DBG_SET"] = "`set'";
    dictionary["DBG_PLOT"] = "`plot'";
    dictionary["DBG_DOTPATH"] = "`dotpath'";
    dictionary["DBG_TMPDIR"] = "`tmpdir'";
    dictionary["DBG_BREAKPOINT"] = "`break'";
    dictionary["DBG_WATCH"] = "`break'";
    dictionary["DBG_MEM"] = "`mem'";
    dictionary["DBG_SELECT"] = "`select'";
    dictionary["DBG_OPTIONS"] = "`options'";
    dictionary["DBG_VERBOSE"] = "`verbose'";
    dictionary["DBG_ON"] = "`on'";
    dictionary["DBG_OFF"] = "`off'";
    dictionary["DBG_TERMTABLE"] = "`termtable'";
    dictionary["DBG_CAUSAL"] = "`causal'";
    dictionary["DBG_DEBUG"] = "`:debug:'";
    dictionary["DBG_TASKS"] = "`tasks'";
    dictionary["DBG_PREDICATES"] = "`predicates'";
    dictionary["DBG_ENABLE"] = "`enable'";
    dictionary["DBG_ENABLE"] = "`disable'";
    dictionary["DBG_NEXT"] = "`next'";
    dictionary["DBG_NEXP"] = "`nexp'";
    dictionary["DBG_EVAL"] = "`eval'";
    dictionary["DBG_VERBOSITY"] = "`verbosity'";
    dictionary["DBG_APPLY"] = "`apply'";
    dictionary["PDDL_AND_EVERY"] = "`and every'";
    dictionary["PYTHON_INIT"] = "`:PyInit'";
}

#line 2243 "src/lexer.cpp"
#line 2244 "src/lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 200 "yacc/lexer.ll"

#line 2384 "src/lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 838 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4910 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

find_rule: /* we branch to this label when backing up */

		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 201 "yacc/lexer.ll"
{cerr << "se encontro o" <<endl;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 202 "yacc/lexer.ll"
{inComment = true;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 203 "yacc/lexer.ll"
{
                if(!inComment) {
                    if(!inScript){
                    inScript = true;
                    script = "";
                    }
                    else
                    script += yytext;
                }
                }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 213 "yacc/lexer.ll"
{
                if(!inComment) {
                    if(!inScript){
                    REJECT;
                    }
                    else {
                    script += "\n";
                    inScript = false;
                    buffer = script;
                    yylval.type_string = buffer.c_str();
                    return PYTHON_CODE;
                    }
                }
                                }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 227 "yacc/lexer.ll"
{
                if(!inComment){
                    if(inScript)
                    script += yytext;
                    else
                    REJECT;
                }
                                }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 236 "yacc/lexer.ll"
{
                if(!inStr) {
                    inStr = true;
                    buffer = "";
                }
                else
                {
                    inStr = false;
                    struct tm ti = {0,0,0,0,0,0,0,0,-1};
                    time_t tim = 0;
                    if(strptime(buffer.c_str(),parser_api->getTFormat(),&ti))
                    {
                    tim=mktime(&ti);
                    if(parser_api->getTStart() != 0){
                        yylval.type_number = ((double) rint(difftime(tim, parser_api->getTStart())));
                        yylval.type_number= rint(yylval.type_number/((1.0)*TU_Transform[(int)parser_api->getTUnit()]));
                    }
                    else
                        yylval.type_number = (double) tim;

                    //cerr << "-----> " << buffer << " se convirtió a: " << yylval.type_number <<  " " << parser_api->getTFormat() << endl;
                    return PDDL_DNUMBER;
                    }
                    else{
                    yylval.type_string = buffer.c_str();
                    return HTN_TEXT;
                    }
                }
                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 266 "yacc/lexer.ll"
{
                    if(inStr)
                    buffer += yytext;
                    else
                    REJECT;
                                }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 273 "yacc/lexer.ll"
{if(inComment) inComment = false;
                                 if(inScript) script += "\n";
                                 if(inStr) buffer += "\n";
                                 lexer->lineNum++;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 277 "yacc/lexer.ll"
{
                    string filename = yytext;
                    int pos = filename.find("\"",0);
                    filename = filename.substr(pos+1,filename.size()-(pos +3));
                    lexer->switchTo(filename);
                }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 283 "yacc/lexer.ll"
{return LEFTPAR;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 284 "yacc/lexer.ll"
{return RIGHTPAR;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 285 "yacc/lexer.ll"
{return PDDL_DEFINE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 286 "yacc/lexer.ll"
{return CUSTOMIZATION;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 287 "yacc/lexer.ll"
{return TIMEUNIT;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 288 "yacc/lexer.ll"
{return TIMESTART;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 289 "yacc/lexer.ll"
{return TIMEFORMAT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 290 "yacc/lexer.ll"
{return TIMEHORIZON;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 291 "yacc/lexer.ll"
{return RELTIMEHORIZON;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 292 "yacc/lexer.ll"
{return THOURS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 293 "yacc/lexer.ll"
{return TMINUTES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 294 "yacc/lexer.ll"
{return TSECONDS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 295 "yacc/lexer.ll"
{return TDAYS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 296 "yacc/lexer.ll"
{return TMONTHS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 297 "yacc/lexer.ll"
{return TYEARS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 298 "yacc/lexer.ll"
{return PDDL_DOMAINREF;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 299 "yacc/lexer.ll"
{return PDDL_DOMAIN;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 300 "yacc/lexer.ll"
{return PDDL_PROBLEM;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 301 "yacc/lexer.ll"
{return PDDL_CONSTANTS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 302 "yacc/lexer.ll"
{return PDDL_REQUIREMENTS;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 303 "yacc/lexer.ll"
{return PDDL_STRIPS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 304 "yacc/lexer.ll"
{return PDDL_TYPING;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 305 "yacc/lexer.ll"
{return PDDL_NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 306 "yacc/lexer.ll"
{return PDDL_DISJUNTIVE_PRECONDITIONS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 307 "yacc/lexer.ll"
{return PDDL_EQUALITY;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 308 "yacc/lexer.ll"
{return PDDL_EXISTENTIAL_PRECONDITIONS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 309 "yacc/lexer.ll"
{return PDDL_UNIVERSAL_PRECONDITIONS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 310 "yacc/lexer.ll"
{return PDDL_QUANTIFIED_PRECONDITIONS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 311 "yacc/lexer.ll"
{return PDDL_CONDITIONAL_EFFECTS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 312 "yacc/lexer.ll"
{return PDDL_FLUENTS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 313 "yacc/lexer.ll"
{return PDDL_ADL;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 314 "yacc/lexer.ll"
{return PDDL_DURATIVE_ACTIONS;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 315 "yacc/lexer.ll"
{return PDDL_DERIVED_PREDICATES;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 316 "yacc/lexer.ll"
{return PDDL_TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 317 "yacc/lexer.ll"
{return HTN_EXPANSION;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 318 "yacc/lexer.ll"
{return META_TAGS;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 319 "yacc/lexer.ll"
{return META;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 320 "yacc/lexer.ll"
{return TAG;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 321 "yacc/lexer.ll"
{return HTN_INLINE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 322 "yacc/lexer.ll"
{return HTN_INLINECUT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 323 "yacc/lexer.ll"
{return PDDL_TYPES;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 324 "yacc/lexer.ll"
{return PYTHON_INIT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 325 "yacc/lexer.ll"
{return PDDL_EITHER;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 326 "yacc/lexer.ll"
{return PDDL_PREDICATES;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 327 "yacc/lexer.ll"
{return PDDL_FUNCTIONS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 328 "yacc/lexer.ll"
{return PDDL_ACTION;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 329 "yacc/lexer.ll"
{return PDDL_PARAMETERS;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 330 "yacc/lexer.ll"
{return PDDL_PRECONDITION;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 331 "yacc/lexer.ll"
{return PDDL_EFFECT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 332 "yacc/lexer.ll"
{return SORTBY;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 333 "yacc/lexer.ll"
{return ASC;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 334 "yacc/lexer.ll"
{return DESC;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 335 "yacc/lexer.ll"
{return MAINTAIN;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 336 "yacc/lexer.ll"
{return PDDL_INIT;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 337 "yacc/lexer.ll"
{return PDDL_NOT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 338 "yacc/lexer.ll"
{return PDDL_AND;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 339 "yacc/lexer.ll"
{return PDDL_OR;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 340 "yacc/lexer.ll"
{return PDDL_IMPLY;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 341 "yacc/lexer.ll"
{return PDDL_EXISTS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 342 "yacc/lexer.ll"
{return PDDL_FORALL;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 343 "yacc/lexer.ll"
{return PDDL_WHEN;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 344 "yacc/lexer.ll"
{return PDDL_SCALE_UP;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 345 "yacc/lexer.ll"
{return PDDL_SCALE_DOWN;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 346 "yacc/lexer.ll"
{return PDDL_ASSIGN;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 347 "yacc/lexer.ll"
{return PDDL_INCREASE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 348 "yacc/lexer.ll"
{return PDDL_DECREASE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 349 "yacc/lexer.ll"
{return PDDL_BIND;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 350 "yacc/lexer.ll"
{return PLUS;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 351 "yacc/lexer.ll"
{return MULTIPLY;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 352 "yacc/lexer.ll"
{return DIVIDE;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 353 "yacc/lexer.ll"
{return LESS_EQUAL;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 354 "yacc/lexer.ll"
{return EQUAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 355 "yacc/lexer.ll"
{return LESS;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 356 "yacc/lexer.ll"
{return GREATHER;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 357 "yacc/lexer.ll"
{return GREATHER_EQUAL;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 358 "yacc/lexer.ll"
{return DISTINCT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 359 "yacc/lexer.ll"
{return DISTINCT;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 360 "yacc/lexer.ll"
{return POW;};
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 361 "yacc/lexer.ll"
{return ABS;};
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 362 "yacc/lexer.ll"
{return SQRT;};
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 363 "yacc/lexer.ll"
{return PPRINT;};
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 364 "yacc/lexer.ll"
{return PDDL_GOAL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 365 "yacc/lexer.ll"
{
                if(AtExpected)
                    return PDDL_AT;
                else
                    REJECT;
                }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 371 "yacc/lexer.ll"
{return PDDL_BETWEEN;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 372 "yacc/lexer.ll"
{return PDDL_OBJECT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 373 "yacc/lexer.ll"
{return PDDL_OVERALL;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 374 "yacc/lexer.ll"
{
                    buffer = "?duration";
                    yylval.type_string = buffer.c_str();
                    return PDDL_DURATIONVAR;
                }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 379 "yacc/lexer.ll"
{
                    buffer = "?start";
                    yylval.type_string = buffer.c_str();
                    return STARTVAR;
                }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 384 "yacc/lexer.ll"
{
                    buffer = "?end";
                    yylval.type_string = buffer.c_str();
                    return ENDVAR;
                }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 389 "yacc/lexer.ll"
{return PDDL_DERIVED;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 390 "yacc/lexer.ll"
{return PDDL_CONDITION;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 391 "yacc/lexer.ll"
{return PDDL_ATSTART;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 392 "yacc/lexer.ll"
{return PDDL_DURATION;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 393 "yacc/lexer.ll"
{return PDDL_DURATIVE_ACTION;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 394 "yacc/lexer.ll"
{return PDDL_ATEND;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 395 "yacc/lexer.ll"
{return PDDL_AND_EVERY;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 396 "yacc/lexer.ll"
{return HTN_TASK;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 397 "yacc/lexer.ll"
{return HTN_TASKS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 398 "yacc/lexer.ll"
{return HTN_ACHIEVE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 399 "yacc/lexer.ll"
{return HTN_METHOD;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 400 "yacc/lexer.ll"
{return HTN_TASKSGOAL;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 401 "yacc/lexer.ll"
{return RANDOM;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 403 "yacc/lexer.ll"
{return DBG_DEBUG;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 404 "yacc/lexer.ll"
{if(inDebugContext) return DBG_QUIT; else REJECT;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 405 "yacc/lexer.ll"
{if(inDebugContext) return DBG_QUIT; else REJECT;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 406 "yacc/lexer.ll"
{if(inDebugContext) return DBG_CONTINUE; else REJECT;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 407 "yacc/lexer.ll"
{if(inDebugContext) return DBG_CONTINUE; else REJECT;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 408 "yacc/lexer.ll"
{if(inDebugContext) return DBG_NEXT; else REJECT;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 409 "yacc/lexer.ll"
{if(inDebugContext) return DBG_NEXT; else REJECT;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 410 "yacc/lexer.ll"
{if(inDebugContext) return DBG_NEXP; else REJECT;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 411 "yacc/lexer.ll"
{if(inDebugContext) return DBG_NEXP; else REJECT;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 412 "yacc/lexer.ll"
{if(inDebugContext) return DBG_HELP; else REJECT;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 413 "yacc/lexer.ll"
{if(inDebugContext) return DBG_HELP; else REJECT;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 414 "yacc/lexer.ll"
{if(inDebugContext) return DBG_PRINT; else REJECT;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 415 "yacc/lexer.ll"
{if(inDebugContext) return DBG_PRINT; else REJECT;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 416 "yacc/lexer.ll"
{if(inDebugContext) return DBG_PRINT; else REJECT;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 417 "yacc/lexer.ll"
{if(inDebugContext) return DBG_DISPLAY; else REJECT;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 418 "yacc/lexer.ll"
{if(inDebugContext) return DBG_DISPLAY; else REJECT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 419 "yacc/lexer.ll"
{if(inDebugContext) return DBG_DESCRIBE; else REJECT;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 420 "yacc/lexer.ll"
{if(inDebugContext) return DBG_UNDISPLAY; else REJECT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 421 "yacc/lexer.ll"
{if(inDebugContext) return DBG_DOTPATH; else REJECT;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 422 "yacc/lexer.ll"
{if(inDebugContext) return DBG_TMPDIR; else REJECT;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 423 "yacc/lexer.ll"
{if(inDebugContext) return DBG_STATE; else REJECT;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 424 "yacc/lexer.ll"
{if(inDebugContext) return DBG_AGENDA; else REJECT;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 425 "yacc/lexer.ll"
{if(inDebugContext) return DBG_PLAN; else REJECT;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 426 "yacc/lexer.ll"
{if(inDebugContext) return DBG_PLOT; else REJECT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 427 "yacc/lexer.ll"
{if(inDebugContext) return DBG_SET; else REJECT;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 428 "yacc/lexer.ll"
{if(inDebugContext) return DBG_VIEWER; else REJECT;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 429 "yacc/lexer.ll"
{if(inDebugContext) return DBG_BREAKPOINT; else REJECT;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 430 "yacc/lexer.ll"
{if(inDebugContext) return DBG_BREAKPOINT; else REJECT;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 431 "yacc/lexer.ll"
{if(inDebugContext) return DBG_WATCH; else REJECT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 432 "yacc/lexer.ll"
{if(inDebugContext) return DBG_WATCH; else REJECT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 433 "yacc/lexer.ll"
{if(inDebugContext) return DBG_EVAL; else REJECT;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 434 "yacc/lexer.ll"
{if(inDebugContext) return DBG_ENABLE; else REJECT;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 435 "yacc/lexer.ll"
{if(inDebugContext) return DBG_DISABLE; else REJECT;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 436 "yacc/lexer.ll"
{if(inDebugContext) return DBG_CAUSAL; else REJECT;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 437 "yacc/lexer.ll"
{if(inDebugContext) return DBG_MEM; else REJECT;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 438 "yacc/lexer.ll"
{if(inDebugContext) return DBG_SELECT; else REJECT;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 439 "yacc/lexer.ll"
{if(inDebugContext) return DBG_OPTIONS; else REJECT;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 440 "yacc/lexer.ll"
{if(inDebugContext) return DBG_VERBOSE; else REJECT;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 441 "yacc/lexer.ll"
{if(inDebugContext) return DBG_ON; else REJECT;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 442 "yacc/lexer.ll"
{if(inDebugContext) return DBG_OFF; else REJECT;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 443 "yacc/lexer.ll"
{if(inDebugContext) return DBG_TERMTABLE; else REJECT;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 444 "yacc/lexer.ll"
{if(inDebugContext) return DBG_TASKS; else REJECT;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 445 "yacc/lexer.ll"
{if(inDebugContext) return DBG_PREDICATES; else REJECT;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 446 "yacc/lexer.ll"
{if(inDebugContext) return DBG_VERBOSITY; else REJECT;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 447 "yacc/lexer.ll"
{if(inDebugContext) return DBG_APPLY; else REJECT;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 449 "yacc/lexer.ll"
{
                                 yylval.type_number = (double) strtod(yytext,NULL);
                                 return PDDL_DNUMBER;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 452 "yacc/lexer.ll"
{
                                 yylval.type_number = (double) strtod(yytext,NULL);
                                 return PDDL_NUMBER;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 456 "yacc/lexer.ll"
{
                                 buffer = yytext;
                                 yylval.type_string = buffer.c_str();
                                 return PDDL_NAME;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 460 "yacc/lexer.ll"
{
                                 buffer = yytext;
                                 yylval.type_string = buffer.c_str();
                                 return PDDL_VAR;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 464 "yacc/lexer.ll"
{
                     if(inDebugContext) {
            buffer = yytext;
                        yylval.type_string = buffer.c_str();
                        return DBG_PATH;
            }
            else REJECT;
                    }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 472 "yacc/lexer.ll"
{return LEFTBRAC;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 473 "yacc/lexer.ll"
{return RIGHTBRAC;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 474 "yacc/lexer.ll"
{return EXCLAMATION;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 475 "yacc/lexer.ll"
{return PDDL_HYPHEN;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 476 "yacc/lexer.ll"
{}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 477 "yacc/lexer.ll"
{
                                 buffer = "Not a valid character: `";
                                 buffer += yytext;
                                 buffer += "'";
                                 lexer->LexerError(buffer.c_str());
                                }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 484 "yacc/lexer.ll"
{
            if(!lexer->restore())
            yyterminate();
        }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 488 "yacc/lexer.ll"
ECHO;
	YY_BREAK
#line 3403 "src/lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 838 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 838 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 837);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 488 "yacc/lexer.ll"


